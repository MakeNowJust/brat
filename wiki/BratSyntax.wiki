#summary Notes on Brat syntax
#labels Phase-Design,syntax,Featured

<wiki:toc max_depth="3" />

===Print something===

_Adds newline, too_

{{{
p "hello world"
}}}

===Creating a new object===

{{{
y = new
}}}

Subclassing:

{{{
x = y.new
}}}

Cloning (sets superclass to y's superclass and copies methods):
{{{
x = y.clone
}}}

===Setting 'fields'===

{{{
person = new
person.name = "Bob"
p person.name
}}}

===Defining functions===

_Functions return their last value_

{{{
hello = { p "hello again, world" }

greet = {|first, last| p "oh, hi ", first, " ", last }
}}}

===Calling a function===

_Parentheses are optional_

{{{
greet "justin", "collins"

greet("john", "doe")

p "hello", " ", "world"
}}}

You can also use a hash-like notation to automatically pass in a hashtable of values. This hashtable will always be assigned to the _last_ parameter in the function.

{{{
a = {|x,y,z| p x, y, z["a"]}

a 1, "a":3, 2
}}}

===Getting a function===

{{{
test = new

test.method = {|x| p "You gave me: ", x }

x = new

x.method = test->method

x.method 123

another = {|m| p "This is ", m }

x.another = ->another

x.another "me"
}}}

_For ease of use, -> actually returns the 'value' in a variable, it just happens to usually be a method._

{{{
w = 1

x = {|z| ->z}

y = { 2 }

p x w

p x y

p x ->y
}}}

===Accessing current object===

{{{
test = new

test.y = { my.z = { p "hi" } }

test.y

test.z
}}}

===Booleans===

False and null are false, true and everything else are true.

false?, true?, and null? can each take 0 to 3 parameters. If a parameter is a function, it will be called with no arguments.

{{{
true.true?

true? true
}}}

_This returns second parameter if first is true, otherwise returns false._

{{{
true? true, 1
}}}

_This returns second parameter if first is true, otherwise returns second parameter._

{{{
true? true, 1, 0

a = null

false? { null? a }, { p "a is not null" }, { p "a is null" }
}}}

===Numbers===

Numbers are numbers. There are some operators defined for them, too. *BUT* beware: the only 'special' operators in Brat are '=' and '->'. The rest are just methods. What does this mean? It means that operators are _always_ applied left to right, there is no "operator precedence."

This is _true_:

{{{
p true? 1 - 1 * 3 == 0
}}}


This gives an error:

{{{
p true? 1 - 1 * 3 == -1 + 1
}}}

If you want something special, use parentheses. Otherwise, everyone gets treated the same.
{{{
a = 1

b = number.new 2

p a - b + c - d

p a - (b * a)
}}}

===Arrays===

Arrays are zero-based, dynamically resized lists which can contain anything.
{{{
a = array.new

a[0] = 3

p a[0]

b = [1, 2, 3, a, "b", {|c| c}]

p b[5] "hello world"
}}}

===Hashes===

Hashtables, associative arrays, maps, dictionaries...whatever you want to call them, these are lists which can be indexed by an arbitrary value.
{{{
a = hash.new

a["a"] = 1

p a["a"]

b = ["a":1]

p b["a"]

c = {|x| x}

b["c"] = ->c

p b["c"] 5
}}}

===Binary Operators===

You can define certain binary operators. These should always take one parameter. They can then be used as 'infix' notation.
{{{
array.@ = {|i| my[i]}

a = [1,2,3,4]

p a @ 3

p a.@ 3

p a.@(3)
}}}

=== Regular Expressions ===

Regular expressions use the PCRE library. They live in between `/` and another `/`.

{{{
a = /hel+o/

p a.match "helllllo"
}}}

===Comments===

{{{
#this is a comment

//p "this will never print"

/*  
  use this for multiple line comments 
*/
}}}

===Keywords===

Brat currently does not have any keywords (and hopefully never will!)

===Semicolons===

Semicolons are optional line enders and no one will cry if you don't use them.
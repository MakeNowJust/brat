#summary Notes on Brat syntax
#labels Phase-Design,syntax,Featured

<wiki:toc max_depth="3" />

===Print something===

_Adds newline, too_

`p "hello world"`

===Creating a new object===

`y = new`

Subclassing:

`x = y.new`

Cloning (does _not_ set superclass):
`x = y.clone`

===Setting 'fields'===

`person = new`

`person.name = "Bob"`

`p person.name`

===Defining functions===

_Functions return their last value_

`hello = { p "hello again, world" }`

`greet = {|first, last| p "oh, hi ", first, " ", last }`

===Calling a function===

_Parentheses are optional_

`greet "justin", "collins"` 

`greet("john", "doe")`

`p "hello", " ", "world"`

You can also use a hash-like notation to automatically pass in a hashtable of values. This hashtable will always be assigned to the _last_ parameter in the function.

`a = {|x,y,z| p x, y, z["a"]}`

`a 1, "a":3, 2`

===Getting a function===

`test = new`

`test.method = {|x| p "You gave me: ", x }`

`x = new`

`x.method = test->method`

`x.method 123`

`another = {|m| p "This is ", m }`

`x.another = ->another`

`x.another "me"`

===Accessing current object===

`test = new`

`test.y = { my.z = { p "hi" } }`

`test.y`

`test.z`

===Arrays===

Arrays are zero-based, dynamically lists which can contain anything.

`a = array.new`

`a[0] = 3`

`p a[0]`

`b = [1, 2, 3, a, "b", {|c| c}]`

`p b[5] "hello world"`

===Hashes===

Hashtables, associative arrays, maps, dictionaries...whatever you want to call them, these are lists which can be indexed by an arbitrary value.

`a = hash.new`

`a["a"] = 1`

`p a["a"]`

`b = ["a":1]`

`p b["a"]`

`c = {|x| x}`

`b["c"] = ->c`

`p b["c"] 5`

===Comments===

`#this is a comment`

`//p "this will never print"`

`/*  use this for multiple line comments */`

===Keywords===

Brat currently does not have any keywords (and hopefully never will!)

===Semicolons===

Semicolons are optional line enders and no one will cry if you don't use them.
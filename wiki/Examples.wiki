#labels Featured
<wiki:toc max_depth="3" />

= The Usual Suspects =

== Hello, World ==

{{{
p "Hello, world"
}}}

== Hello, `<name>` ==

{{{
print "Hello! What is your name? "
p "Nice to meet you, ", g, "."
}}}

== Print numbers 1 to 10 ==

{{{
n = 1
while {
        p n
        n = n + 1
        n <= 10
}
}}}
== Factorial ==
_Note: recursive functions need to be attached to object._
{{{
my.fact = { x |
        true? x == 0, 1, { x * fact(x - 1)}
}

p fact 5
}}}

== Fibonacci ==

{{{
my.fibonacci = { x |
        true? x == 0,
                0,
                { true? x == 1,
                        1,
                        {
                                fibonacci(x - 1) + fibonacci(x - 2)}};
                        }

p fibonacci 10
}}}


= Extending Objects =

== Convenience == 

{{{
array.first = { my[0] }
array.rest = { my[1,-1] }

p [1,2,3].first
p [1,2,3].rest
}}}

== Let's get functional? ==

{{{
array.map = { f |
        true? my.length <= 0,
                {[]},
                { true? my.length == 1, {[f my.first]}, {[f my.first] + my.rest.map ->f} }
}

p [1,2,3].map({ x | x + 1})
}}}

== Reverse Complement FASTA ==

From the [http://shootout.alioth.debian.org/u32q/benchmark.php?test=revcomp&lang=all language shootout]

{{{
translate = [
"A":"T", "C":"G", "G":"C", "T":"A", "U":"A", "M":"K", "R":"Y", "W":"W", "S":"S", "Y":"R", "K":"M", "V":"B", "H":"D", "D":"H", "B":"V", "N":"N",
"a":"T", "c":"G", "g":"C", "t":"A", "u":"A", "m":"K", "r":"Y", "w":"W", "s":"S", "y":"R", "k":"M", "v":"B", "h":"D", "d":"H", "b":"V", "n":"N"
]

my.process_line = { line, index |
        true? line.length > 0 && (index < line.length),
                {
                true? line[0] == ">",
                        { p line },
                        { print translate[line[index]]
                          process_line line, index + 1 }
                },
                { p }
}

my.reverse_complement = {
        input = g
        null? input,
                null,
                { process_line input, 0
                  reverse_complement }
}

reverse_complement
}}}

= For Fun =

== How are you? ==

{{{
how = { x | print "How"; x }
are = { x | {print " are "; x}}
you? = {{p "you?"}}

how are you?
}}}

== How are you? (Two) ==

{{{
how = { x | p "you?" }
are = { x | print " are " }
you? = { print "how" }

how are you?
}}}

== How are you? (Three) ==

{{{
how = { x | p "how" + x }
are = { x | " are " + x }
you? = { "you?" }

how are you?
}}}

== How are you? (Easy) ==

{{{
how = { x | p "how are you?" }
are = { x | }
you? = null

how are you?
}}}

== How are you? (With array.map) ==

{{{
how = { x | x << "\n"; x.map ->print }
are = { x | x}
you? = ["How", " are ", "you?"]

how are you?
}}}

== How are you? (Auto-reply) ==

{{{
How = { x | p "How", x[0], x[1] }
are = { x | [" are "] + x }
you? = ["you?"]
I = { x | p "I" , x[0], x[1], x[2], x[3] }
am = { x, y | [" am"] + x + y }
fine = [" fine, "]
thank = { x | ["thank"] + x }
you! = [" you!"]

How are you?
I am fine, thank you!
}}}

== How are you? (User reply) ==

{{{
How = { x |
        x
        mood = g
        p mood, "? Hmm..."
}
are = { x | { print x } }
you? = "How are you? "

How are you?
}}}
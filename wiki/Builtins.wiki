#summary Objects built into Brat

Brat comes with several "built in" objects that are always available to your program. The only thing special about these is that they are written in Neko and not Brat. Otherwise, they are the same as any other Brat object.

== Object ==

There is one object which is the mother of all objects. There is no need to access it directly, though, because the entire program is defined within the context of this object. Using `my` outside of any methods will refer to this base object.

Object methods:

  * `new` - returns a new object, which is a subclass of object
  * `clone` - returns a new object, which is a clone of object (_not_ a subclass)
  * `p(...)` - print out values, followed by newline
  * `print(...)` - print out values, no newline
  * `g(b = "\n")` - gets line from stdin, does not include EOL character
  * `my` - returns the current object
  * `false` - false value
  * `true` - true value
  * `null` - null value
  * `not(x)`
  * `false?`
  * `true?`
  * `null?`
  * `==` - checks if two objects are the same

== array ==

array is an object which holds a list of objects.

There is a literal array syntax: `[1,2,3]`

array methods:

  * `new(a = [])` - returns a new array or a copy of one
  * `get(i)`, `[i]` - returns element x in list
  * `get(start, stop)`, `[start,stop]` - returns a slice of the array
  * `set(i)`, `[i] = y` - sets element i to y
  * `<< y` - appends y to the array
  * `+ a` - concatenates array a to the array

== hash ==

hash is an object which associates keys with values.

It also has a literal syntax: `[1:"a", 2:"b"]`

hash methods:

  * `new(hash = [])` - returns a new hash 
  * `get(k)`, `[k]` - returns value associated with key
  * `set(k,v)`, `[k] = v` - sets key to value

== number ==

Numbers are also objects in Brat, subclasses of the number object.

number methods:

 * `new(n)` - returns a new number
 * `+` - addition
 * `-` - subtraction
 * `*` - multiplication
 * `/` - division
 * `>` - greater than
 * `<` - less than
 * `<=` - less than or equal to
 * `>=` - greater than or equal to

== string ==

Strings of characters ("hello!") are objects, too, subclasses of the string object.

string methods:

 * `new` - returns a new string

=== Functions ===

Functions are the only non-objects in Brat. But they don't mind being special.
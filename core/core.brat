enumerable = new

enumerable.any? = { block |
	flag = false
	my.each { o |
		false? flag
			{ true? block(o) { flag = true } }
	}
	flag
}

enumerable.all? = { block |
	flag = true
	my.each { o |
		true? flag
			{ false? block(o) { flag = false } }
	}
	flag
}

enumerable.find = { block |
	found = null
	my.each { o |
		null? found
			{ true? block(o) { found = o } }
	}
	found
}

enumerable.select = { block |
	new_ary = []
	my.each { i |
		true? block(i) { new_ary << i }
	}
	new_ary
}

enumerable.sort = {
	my.to_array.sort
}

enumerable.to_array = {
	new_ary = []
	index = 0
	my.each { o |
		new_ary[index] = o
		index = index + 1
	}
	new_ary
}

export enumerable, "enumerable"

array.any? = enumerable->any?
array.find = enumerable->find
array.all? = enumerable->all?
array.select = enumerable->select

comparable = import "comparable"

string.squish comparable

number.squish comparable

number.times = { block |
	true? my > 0
		{
			n = 0
			true? method_arity(->block) > 0
				{ while {
					block n
					n = n + 1
					n < my
				}}
				{ while {
					block
					n = n + 1
					n < my
				}}
		}
	my
}

number.to = { stop, block |
	n = my
	true? n < stop
		{ while { n <= stop }
			{ block n; n = n + 1 }
		}
		{ while { n >= stop }
			{ block n; n = n - 1 }
		}
	stop
}

object.&& = { rhs |
        true? my
                { rhs }
                { false }
}

object.|| = { rhs |
	true? my
		{ true }
		{ true? rhs }
}


grammar BaseBrat

  rule program
 	line+ {
		def brat
			"var @brat = $loader.loadmodule(\"neko/internal\", $loader);\n" <<
			"var @main_brat  = $new(@brat.base_object);\n" <<
			"@main_brat.@main_tantrum = function() {\n" <<
			self.inner_brat << ";\n" <<
			"}\n" <<
			"@exit_value = @main_brat.@main_tantrum();\n"
		end

		def inner_brat
			elements.map {|e| e.brat }.compact.join(";").gsub(";", ";\n")
		end
	}
  end

  rule line
 	space? e:expression space? ( eof / eol / eob) {
		def brat
			e.brat if e.respond_to? :brat
		end
	}
	/
	empty_line
  end

  rule empty_line
  	space? eol {
		def brat
			""
		end
	}
	/
	space
  end

  rule expression
 	assignment / paren_exp / number / method_access / method_invocation / string / method_definition
  end

  rule assignment
 	lhs:field_access space? "=" space? rhs:method_definition {
		def brat
			output = lhs.brat <<
			rhs.brat(lhs.result) <<
			"$objset(#{lhs.result}, $hash(\"#{lhs.i.brat}\"), #{rhs.result});"
			@result = rhs.result
			output
		end
	}
	/
 	lhs:field_access space? "=" space? rhs:method_access {
		def brat
			output = lhs.brat << 
			rhs.brat <<
			"$objset(#{lhs.result}, $hash(\"#{lhs.i.brat}\"), #{rhs.result});"
			@result = rhs.result
			output
		end
	}
	/
 	lhs:field_access space? "=" space? rhs:expression {
		def brat
			output = lhs.brat << 
			rhs.brat <<
			"$objset(#{lhs.result}, $hash(\"#{lhs.i.brat}\"), function() {#{rhs.result}});"
			@result = rhs.result
			output
		end
	}
	/
	lhs:identifier space? "=" space? rhs:expression {
		def brat
			output = rhs.brat <<
			if var_exist? lhs.brat
				"#{lhs.brat} = #{rhs.result}"
			else
				"var #{lhs.brat} = #{rhs.result}"
			end
			@result = rhs.result
			output
		end
	}
  end

  rule field_access
  	m:method_chain i:identifier {
		def brat
			output = m.brat
			@result = m.result
			output
		end
	}
  end

  rule paren_exp
  	'(' expression ')' {
		attr_reader :result
		def brat
			next_temp
			"var #@result = (" + expression.brat + ");"
		end
	}
  end

  rule identifier
  	[a-zA-Z] [a-zA-Z0-9_!?]* {
		def brat
			text_value
		end
	}
  end

  rule number
  	float / integer 
  end

  rule float
  	i:integer "." d:integer {
		def brat
			next_temp
			"var #@result = #{i.text_value}.#{d.text_value};"
		end
	}
  end

  rule integer
	[0-9]+ {
		def brat
			next_temp
			"var #@result = #{text_value};"
		end
	}
  end

  rule digit
  	[0-9] {
		def brat
			text_value
		end
	}
  end

  rule string
    '"' (!'"' . / '\"')* '"' {
	    def brat
		    next_temp
		    "var #@result = #{text_value};"
	    end
    }
  end

  rule method_definition
	"{" space? fa:formal_args space? l:line* "}" {
		def brat(this = "this")
			new_scope
			if fa.respond_to? :brat
				args = fa.brat
			else
				args = ""
			end
			next_temp
			output = "var #@result = function(#{args}) { this = #{this}; #{l.elements.map {|e| e.brat}.join(";")} };"
			pop_scope
			output
		end
	}
  end

  rule formal_args
  	"|" space? i:identifier? rest_formal "|" {
		def brat
			if i.respond_to? :brat
				args = [i.brat] + rest_formal.brat
			else
				args = []
			end.join(", ")
		end
	}
	/
	!"|" 
  end

  rule rest_formal
  	(space? "," space? identifier)* {
		def brat
			if elements.length > 0
				elements.map do |e|
					e.identifier.brat
				end
			else
				[]
			end
		end
	}
  end

  rule method_invocation
  	lhs:method_chain i:identifier a:arg_list {
		def brat
			output = lhs.brat
			output << a.brat
			next_temp
			output << "var #@result = @brat.call_method(#{lhs.result}, \"#{i.brat}\", #{a.result});"
		end
	}
	/
	m:identifier a:arg_list {
		def brat
			next_temp
			a.brat <<
			"var #@result;
			if($typeof(#{m.brat}) == $tnull) {
				if(@brat.has_field(this, \"#{m.brat}\")) {
			 		#@result = @brat.call_method(this, \"#{m.brat}\", #{a.result});
				}
				else
				{
					#@result = null;
				}
			} else {
				if($typeof(#{m.brat}) == $tfunction) {
					#@result = $call(#{m.brat}, this, #{a.result});
				}
				else { #@result = #{m.brat} }
			};"

		end

	}
  end

  rule method_chain
 	(e:method_lhs ".")+ {
		def brat
			output = elements.first.e.brat
			last = elements.first.e.result
			@result = last
			meth = args = nil
			elements[1..-1].each do |elem|
				meth = elem.e.identifier.brat
				args = elem.e.arg_list
				output << args.brat
				next_temp
				"var #@result = @brat.call_method(#{last}, \"#{meth}\", #{args.result});"
				last = @result
			end
			output
		end
	}	
  end

  rule method_lhs
  	identifier !space arg_list {
		def brat
			next_temp
			arg_list.brat <<
			"var #@result;" <<
			"if(@brat.has_field(this, \"#{identifier.brat}\")) {" <<
			" #@result = @brat.call_method(this, \"#{identifier.brat}\", #{arg_list.result});" <<
			"}" <<
			"else {" <<
			" if($typeof(#{identifier.brat}) == $tfunction) {" <<
			" #@result = $call(#{identifier.brat}, this, #{arg_list.result});" <<
			" } else { #@result = #{identifier.brat} }" <<
			"};"
		end	
	}
  end

  rule method_access
  	o:method_invocation "->" m:identifier {
		def brat
			next_temp
			o.brat <<
			"var #@result = $objget(#{o.result}, $hash(\"#{m.brat}\"));"
		end
	}
  end

  rule arg_list
	'(' inner_arg_list ')' {
		def brat
			output = inner_arg_list.brat
			@result = inner_arg_list.result
			output
		end
	}
	/
	'(' empty_list ')' {
		def brat
			next_temp
			"var #@result = $amake(0);"
		end
	}
	/
  	space inner_arg_list {
		def brat
			output = inner_arg_list.brat
			@result = inner_arg_list.result
			output
		end
	}
	/
	![\(] space? {
		def brat
			next_temp
			"var #@result = $amake(0);"
		end
	}
  end

  rule inner_arg_list
  	e:arg_first o:arg_next* {
		def brat
			output = e.brat
			args = [e.result]
			o.elements.each do |elem|
				if elem.respond_to? :brat
					output << elem.brat
					args << elem.result
				end
			end
			next_temp
			output << "var #@result = $array(#{args.join(',')});"
		end
	}
  end

  rule arg_first
	named_argument / expression
  end

  rule arg_next
  	space? "," space? arg_first {
		def brat
			output = arg_first.brat
			@result = arg_first.result
			output
		end
	}
  end

  rule named_argument
  	identifier space? ":" space? expression
  end

  rule empty_list
  	space? {
		def brat
			nil
		end
	}
  end

  rule eol
	"\n"+ / ";"+ / "\r\n"+ {
		def brat
			"\n"
		end
	}
  end

  rule space
     (" " / "\t")+ {
		def brat
			text_value
		end
	}
  end
  
  rule eof
  	(eol / space)? !. {
		def brat
			nil
		end
	}
  end

  rule eob
  	space? &"}" space? {
		def brat
			nil
		end
	}
  end
end

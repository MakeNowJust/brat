var base_object = $new(null);

base_object.new = $varargs(function(args) {
	var arg_hash;
	if($asize(args) > 0) {
		arg_hash = args[0];
	}
	else
	{
		arg_hash = $hnew(0);
	}
	return new_brat(this, arg_hash);
})

base_object.clone = function() {
	var brat = $new(this);
	$objsetproto(brat, $objgetproto(this));
	brat;
}

base_object.my = function() {
	return this;
}
base_object.p = $varargs(function(args) {
	$call($print, null, args);
	$print("\n");
})


has_field = function(object, field_name) {
	if(object == null) {
		return null;
	}
        if($objfield(object, $hash(field_name))) {
                return true;
        }
        else {
                var proto = $objgetproto(object);
                if(proto == null) {
                        return false;
                }
                else {
                        return has_field(proto, field_name);
                }
        }
}

//Create a new object with either parent_brat or base_object
//as the parent class.
new_brat = function(parent_brat, arg_hash) {
	var brat = $new(null);

	if(parent_brat == null) {
		$objsetproto(brat, base_object);
	}
	else 
	{
		$objsetproto(brat, parent_brat);
	}


	if(arg_hash != null && $hsize(arg_hash) > 0) {
		var set_f = function(k,v) {
			$objset(this, $hash(k), v);
		}

		$hiter(arg_hash, set_f);
	}

	return brat;
}

base_array = new_brat(null, null);

base_array.new = $varargs(function(args) {
	var ary = new_brat(base_array, null);
	new_brat.@internal_array = $acopy(args);
	ary;
})

base_array.get = $varargs(function(args) {
	if($asize(args) == 0) {
		throw("Invalid array access: null");
	}
	//TODO: Finish this method :)
})

base_array.set = function(index, value) {
	this.@internal_array[index] = value;
}

$exports.call_method = function(object, method, args) {
	if(object == null) {
		$throw("Method invoked on null object.");
	}
	else {
		$objcall(object, $hash(method), args);
	}
}

$exports.base_object = base_object;
$exports.has_field = has_field;

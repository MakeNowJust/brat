var base_object = $new(null);

base_object.new = $varargs(function(args) {
	var arg_hash;
	if($asize(args) > 0) {
		arg_hash = args[0];
	}
	else
	{
		arg_hash = $hnew(0);
	}
	return new_brat(this, arg_hash);
})

base_object.clone = function() {
	var brat = $new(this);
	$objsetproto(brat, $objgetproto(this));
	brat;
}

base_object.my = function() {
	return this;
}
base_object.p = $varargs(function(args) {
	$call($print, null, args);
	$print("\n");
})


has_field = function(object, field_name) {
	if(object == null) {
		return null;
	}
        if($objfield(object, $hash(field_name))) {
                return true;
        }
        else {
                var proto = $objgetproto(object);
                if(proto == null) {
                        return false;
                }
                else {
                        return has_field(proto, field_name);
                }
        }
}

//Create a new object with either parent_brat or base_object
//as the parent class.
new_brat = function(parent_brat, arg_hash) {
	var brat = $new(null);

	if(parent_brat == null) {
		$objsetproto(brat, base_object);
	}
	else 
	{
		$objsetproto(brat, parent_brat);
	}


	if(arg_hash != null && $hsize(arg_hash) > 0) {
		var set_f = function(k,v) {
			$objset(this, $hash(k), v);
		}

		$hiter(arg_hash, set_f);
	}

	return brat;
}

base_array = new_brat(null, null);
base_array.@internal_array = $amake(0);

base_array.new = $varargs(function(args) {
	var ary = new_brat(base_array, null);
	ary.@internal_array = $acopy(args);
	ary.length = function() { 0 };
	ary;
});

base_array.get = $varargs(function(args) {
	if($asize(this.@internal_array) == 0) {
		return null;
	}
	if($asize(args) == 0) {
		throw("Invalid array access: null");
	}
	if($asize(args) == 1) {
		if(args[0] >= this.length()) {
			null;
		}
		else {
			this.@internal_array[args[0]];
		}
	}
	else if($asize(args) == 2) {
		var len = $asize(this.@internal_array);
		var start = args[0];
		var stop = args[1];
		if(start < 0) {
			args[0] = len + args[0];
		}
		if(stop < 0) {
			args[0] = len + args[0];
		}
		if(stop >= len) {
			stop = len - 1;
		}
		if(start >= len) {
			start = len -1;
		}
		if(args[0] < args[1]) {
			$asub(this.@internal_array, start, (stop - start + 1));
		}
		else {
			$asub(this.@internal_array, stop, (start - stop + 1));
		}
		this;
	}
});

base_array.set = function(index, value) {
	if(index >= this.length()) {
		var new_array = $amake(index - this.length() + 1);
		this.@internal_array = $aconcat($array(this.@internal_array, new_array));
		this.length = function() { index + 1 };
	}
	this.@internal_array[index] = value;
	this;
}

base_array.__set = base_array.set;
base_array.__get = base_array.get;

base_hash = new_brat(null, null);
base_hash.@internal_hash = $hnew(0);

base_hash.new = $varargs(function(args) {
	var hsh = new_brat(base_hash, null);
	if($asize(args) == 0) {
		hsh.@internal_hash = $hnew(1);
	}
	else if($typeof(args[0]) == $tabstract) {
		hsh.@internal_hash = args[0];
	}
	else {
		throw("Invalid hash initialization:" + $string(args));
	}
	hsh.length = function() { $hcount(this.@internal_hash); };
	hsh;
});

base_hash.get = function(index) {
	$hget(this.@internal_hash, index, null);
}

base_hash.set = function(index, value) {
	$hset(this.@internal_hash, index, value, null);
	this;
}

base_hash.__set = base_hash.set;
base_hash.__get = base_hash.get;

$exports.make_hash = function(neko_hash) {
	var hsh = base_hash.new();
	hsh.@internal_hash = neko_hash;
	hsh;
}

$exports.make_array = function(neko_array) {
	var ary = base_array.new();
	ary.@internal_array = neko_array;
	var len = $asize(neko_array);
	ary.length = function() { len };
	ary;
}

$exports.call_method = function(object, method, args) {
	//$print("Calling ", method, " on ", object, " with (", args, ")\n");
	if(object == null) {
		$throw("Method invoked on null object.");
	}
	else {
		$objcall(object, $hash(method), args);
	}
}

$exports.invoke = function(method, args, context) {
	//$print("Calling ", method, " with (", args, ")\n");
	if(method == null) {
		$throw("Could not invoke null method.");
	}
	else {
		$call(method, context, args);
	}
}

$exports.base_object = base_object;
$exports.has_field = has_field;
$exports.base_array = base_array;
$exports.base_hash = base_hash;

#!/bin/env ruby

def compile_parser(force = false)
	if force or not File.exist? "#$program_path/parser/brat.rb" or newer? "#$program_path/parser/brat.treetop", "#$program_path/parser/brat.rb"
		system "cd parser && tt brat.treetop"
	else
		false
	end
end

def compile_brat_internal(force = false)
	if force or not File.exist? "#$program_path/core/internal.n" or newer? "#$program_path/core/internal.neko", "#$program_path/core/internal.n"
		system "cd #$program_path/core && nekoc internal.neko"
	else
		false
	end
end

def brat_to_neko input
	require 'rubygems'
	require 'treetop'
	require "#$program_path/parser/brat"
	require "#$program_path/parser/parser-extension"

	parser = BaseBratParser.new
	tree = parser.parse(input)
	if tree.nil? or not tree.respond_to? :brat
		raise "Error during parsing:\n#{parser.terminal_failures.join("\n")}\n#{tree.inspect}"
	else
		tree.brat
	end
end

def newer? file1, file2
	File.mtime(file1) > File.mtime(file2)
end

def brat file_name, keep_intermediate = false, force = false
	new_parser = compile_parser force
	new_internal = compile_brat_internal force

	if not File.exist?(file_name + ".n") or newer? file_name, file_name + ".n" or new_parser or new_internal or force
		if not File.exist? file_name + ".neko" or newer? file_name, file_name + ".neko" or new_parser or new_internal or force
			brat_input = File.read file_name
			begin
				neko = brat_to_neko brat_input
			rescue RuntimeError => e
				puts e
				exit
			end
			File.open(file_name + ".neko", "w") {|f| f.puts neko }
		end

		system "nekoc #{file_name}.neko" or abort "Error while compiling program"
	end
	if not keep_intermediate and File.exist? file_name + ".neko"
		File.delete file_name + ".neko"
	end

	if not system "neko #{file_name}.n"
		abort "Error while running program."
	end
end

def brat_standalone file_name, keep_intermediate = false, force = false
	abort "Not working yet."
	new_parser = compile_parser force
	new_internal = compile_brat_internal force

	if not File.exist?(file_name + ".n") or newer? file_name, file_name + ".n" or new_parser or new_internal or force
		if not File.exist? file_name + ".neko" or newer? file_name, file_name + ".neko" or new_parser or new_internal or force
			brat_input = File.read file_name
			begin
				neko = brat_to_neko brat_input
			rescue RuntimeError => e
				puts e
				exit
			end
			File.open(file_name + ".neko", "w") {|f| f.puts neko }
		end

		system "nekoc #{file_name}.neko" or abort "Error while compiling program"
	end

	#Doesn't -quite- work
	#system "cp #{file_name}.n #{file_name}.bin.n; nekoc -link #{file_name}.bin neko/internal; nekotools boot #{file_name}.bin.n"

	if not keep_intermediate and File.exist? file_name + ".neko"
		File.delete file_name + ".neko"
		File.delete file_name + ".n"
	end
end

if ARGV[0]
	$program_path = File.dirname(File.expand_path(__FILE__))
	filename = Dir.pwd + "/" + ARGV[0]
	ENV['LD_LIBRARY_PATH'] ||= "" 
	ENV['LD_LIBRARY_PATH'] = ENV['LD_LIBRARY_PATH'] + ":#$program_path/lib/"
	ENV['NEKOPATH'] ||= ""
	ENV['NEKOPATH'] = ENV['NEKOPATH'] + ":#$program_path/lib/:#$program_path/core/"
	ENV['PATH'] ||= ""
	ENV['PATH'] = ENV['PATH'] + ":#$program_path/bin/"

	force = ARGV.include?("-f")

	if ARGV.include? "-s"
		brat_standalone filename, true, force
	elsif ARGV.include? "-t"
		require 'benchmark'
		time = Benchmark.measure do
			brat filename, true, force
		end
		puts "Ran in: #{time.format('%r')} seconds"

	else
		brat filename, true, force
	end

else
	abort "Please supply Brat file name"
end

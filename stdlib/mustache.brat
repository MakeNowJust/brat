include :scanner

parser = object.new
compiler = object.new
mcontext = object.new

mustache = object.new
mustache.parse = { template |
  parser.new.parse template
}

mustache.compile = { tokens, context |
  compiler.new(mcontext.new(context)).compile(tokens)
}

mcontext.init = { context |
  my.context = [context]
}

mcontext.prototype [
  pop: {
    my.context.pop
  }

  push: { value |
    my.context.push value
  }

  find: { key |
    c = my
    res = null

    my.context.reverse_each_while { r |
      res = c.get_value key, r
      not res
    }

    res
  }

  get_value: { key, subj |
    true? subj.hash?
    {
      key.each { k |
        subj = subj[k]
      }
      subj
    }
  }
]

parser.prototype [
  parse: { template |
    my.scan = scanner.new template

    my.result = [:multi]
    my.sections = []
    this = my

    until { scan.end? } {
      scan_tags || {this.scan_text}
    }

    false? sections.empty?
      { throw "Unclosed section #{sections.last.first}" }

    my.result
  }

  scan_tags: {
    before = scan.scan /([\s\t]*){{/

    false? before
      { false }
      {
        true? { before[1] && not before[1].empty? }
          { result << [:static, before[1]] }

        type = scan.scan /[#^\/<>]/ #Get tag type
        true? type == "<"
          { type = ">" }
          { true? type
            { type = type[0] } }

        scan.scan /\s*/ #Skip whitespace
        content = scan.scan(/(\w|[?!\/.-])*/)[0] #Get tag content
        fetch = [:mustache, :fetch, content.split /\./]

        prev = result #Whys?

        tags = [
          "#" : {
            block = [:multi]
            my.result << [:mustache, :section, fetch, block]
            sections << [content, my.result]
            my.result = block
          }

          "^" : {
            block = [:multi]
            result << [:mustache, :inverted_section, fetch, block]
            sections << [content, result]
            my.result = block
          }

          "/" : {
            prev_sec = sections.pop
            section = prev_sec[0]

            false? section
              { throw "Closing unopened section: #{content}" }

            false? section == content
              { throw "Unclosed section: #{section}" }

            my.result = prev_sec[1]
          }

          ">" : {
            result << [:mustache, :partial, content]
          }
        ]

        true? tags.key?(type)
          { tags[type]() }
          { result << [:mustache, :etag, fetch] }

        scan.scan /\s+/

        false? scan.scan("}}")
          { throw "Unclosed tag: #{content}" }

        false
      }
  }

  scan_text: {
    text = scan_until_otag

    false? text
      {
        text = scan.rest
        scan.end
      }

    false? text.empty?
      { result << [:static, text] }
  }

  scan_until_otag: {
    match = scan.scan /([^{]*){{/
    true? match
      {
        scan.pos = scan.pos - 2 #Back up
        match[1] #Return text matched
      }
      { false }
  }
]

compiler.init = { context |
  my.context = context
  my.current = context
}

compiler.prototype [
  compile: { tokens |
    c = my
    true? tokens.first.string?
      {
        c.call_method tokens.first, tokens
      }
      {
        tokens.map { t |
          c.call_method t.first, t
        }
      }
    }

  static: { token |
    token[1]
  }

  multi: { tokens |
    c = my
    tokens[1, tokens.length].map({ t | c.compile t }).join
  }

  mustache: { token |
    call_method token[1], token
  }

  section: { token |
    conditional = compile token[2]

    true? conditional
      {
        true? conditional.array?
          {
            c = my
            res = ""
            conditional.each { i |
              c.context.push i
              res << c.compile token[3]
              c.context.pop
            }
            res
          }
          {
            my.context.push conditional
            res = compile token[3]
            my.context.pop
            res
          }
      }
      {
        ""
      }
  }

  inverted_section: { token |
    conditional = compile token[2]

    false? conditional
      {
        compile token[3]
      }
      {
        ""
      }
  }

  etag: { token |
    res = compile token[2]
    null? res
    { "" }
    { res }
  }

  fetch: { token |
    my.context.find token[2]
  }
]


export mustache, :mustache

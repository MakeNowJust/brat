include :scanner

parser = object.new
compiler = object.new

mustache = object.new
mustache.parse = { template |
  parser.new.parse template
}

mustache.compile = { tokens, context |
  compiler.new(context).compile(tokens)
}

parser.prototype [
  parse: { template |
    my.scan = scanner.new template

    my.result = [:multi]
    my.sections = []
    this = my

    until { scan.end? } {
      scan_tags || {this.scan_text}
    }

    false? sections.empty?
      { throw "Unclosed section #{sections.last.first}" }

    my.result
  }

  scan_tags: {
    p "Scanning tags at #{scan.pos}"
    before = scan.scan /([\s\t]*){{/

    false? before
      { p "No tag!"; false }
      {
        true? { before[1] && not before[1].empty? }
          { result << [:static, before[1]] }

        p "Looking for tag in #{scan.rest}"

        type = scan.scan /[#^\/<>]/ #Get tag type
        true? type == "<"
          { type = ">" }
          { true? type
            { type = type[0] } }

        p "Tag type: #{type}"

        scan.scan /\s*/ #Skip whitespace
        content = scan.scan(/(\w|[?!\/.-])*/)[0] #Get tag content
        fetch = [:mustache, :fetch, content.split /\./]

        prev = result #Whys?

        tags = [
          "#" : {
            block = [:multi]
            my.result << [:mustache, :section, fetch, block]
            sections << [content, my.result]
            p "Add section #{content}"
            my.result = block
            p "And now result is #{result}"
          }

          "^" : {
            block = [:multi]
            result << [:mustache, :inverted_section, fetch, block]
            sections << [content, result]
            p "Add inverted section #{content}"
            my.result = block
          }

          "/" : {
            prev_sec = sections.pop
            section = prev_sec[0]

            p "Closing section #{content}"

            false? section
              { throw "Closing unopened section: #{content}" }

            false? section == content
              { throw "Unclosed section: #{section}" }

            my.result = prev_sec[1]
          }

          ">" : {
            result << [:mustache, :partial, content]
          }
        ]

        true? tags.key?(type)
          { tags[type]() }
          { result << [:mustache, :etag, fetch] }

        p "Result is #{result}"

        scan.scan /\s+/

        false? scan.scan("}}")
          { throw "Unclosed tag: #{content}" }

        false
      }
  }

  scan_text: {
    p "Scanning text at #{scan.pos}"
    text = scan_until_otag

    false? text
      {
        text = scan.rest
        scan.end
      }
  
    false? text.empty?
      { result << [:static, text] }
  }

  scan_until_otag: {
    match = scan.scan /([^{]*){{/
    true? match
      {
        p "Matched #{match.full_match}"
        scan.pos = scan.pos - 2 #Back up
        match[1] #Return text matched
      }
      { p "No tag in text!"; false }
  }
]

compiler.init = { context |
  my.context = context
  my.current = context
}

compiler.prototype [
  compile: { tokens |
    p "Compile! #{tokens}"
    c = my
    true? tokens.first.string?
      { 
        p "C is #{c}"
        c.call_method tokens.first, tokens
      }
      {
        tokens.map { t |
          p "c is #{c}"
          c.call_method t.first, t
        }
      }
    }

  static: { token |
    token[1]
  }

  multi: { tokens |
    c = my
    tokens[1, tokens.length].map({ t | c.compile t }).join
  }

  mustache: { token |
    p "Mustache!"
    call_method token[1], token
  }

  section: { token |
    conditional = compile token[2]

    true? conditional
      {
        true? conditional.array?
          {
            c = my
            res = ""
            p "Conditional is #{conditional}"
            conditional.each { i |
              p "At #{i} and #{token[3]}"
              old_context = c.current
              c.current = i
              p "Current is now #{c.current}"
              res << c.compile token[3]
              c.current = old_context
            }
            p "Done with it!"
            res
          }
          {
            old_context = my.current
            my.current = conditional
            res = compile token[3]
            my.current = old_context
            res
          }
      }
      {
        ""
      }
  }

  inverted_section: { token |
    conditional = compile token[2]

    false? conditional
      {
        compile token[3]
      }
      {
        ""
      }
  }

  etag: { token |
    res = compile token[2]
    null? res
    { "" }
    { res }
  }

  fetch: { token |
    p "fetch! #{token} from #{my.current}"
    c = my.current
    token[2].each { n |
      c = c[n]
    }
    p "fetched #{c}"
    c
  }
]


export mustache, :mustache

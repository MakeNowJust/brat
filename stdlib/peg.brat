#* Simple implementation of parsing expression grammar.
  Intended to replace Treetop as the parser for Brat
  but may be used for other purposes, as well.
*#

#Scans through a string, moving the "cursor" when a match occurs.
scanner = object.new

#Initialize with string to match against
scanner.init = { str |
  my.str = str
  my.pos = 0
}

#Attempt to match string against current position. Advances position
#when there is a match.
scanner.scan_string = { matcher |
  patch = my.str[my.pos, my.pos + matcher.length - 1]

  true? patch == matcher
    { 
      my.pos = my.pos + matcher.length
      patch
    }
}

#Attempt to match regex against current position. Advances position
#when there is a match.
scanner.scan_regex = { matcher |
  current = my.pos
  result = my.str.match(matcher, current)

  true? result && { current == result.start_pos }
    {
      my.pos = result.end_pos + 1
      result
    }
}

peg = object.new

peg.init = { gramma |
  my.named_rules = [:]
  my.first = null
  my.rule_id = 0
  my.memo = [:]

  gramma #Actually set up parser
}

peg.next_id = {
  my.rule_id = my.rule_id + 1
}

peg.make_memo = { result, pos |
  m = object.new
  m.result = result
  m.pos = pos
  m
}

peg.make_rule = { rule |
  id = next_id
  memo = my.memo
  memo[id] = [:]

  { x |
    m = memo[id][x.pos]
    true? m
      {
        x.pos = m.pos
        m.result
      }
      {
         current = x.pos
         m = peg.make_memo rule(x) x.pos
         memo[id][current] = m
         m.result
      }
  }
}

peg.make_result = { match_pos, end_pos, matched |
  result = object.new
  result.start_pos = match_pos
  result.end_pos = end_pos
  result.matched = matched
  when { matched.string? } { result.text = matched }
       { matched.has_method? :full_match } { result.text = matched.full_match }
       { matched.array? } { result.text = matched.map(:text).join }
       { matched.has_method? :text } { result.text = matched.text }
       { true } { result.text = "" }

  true? matched.array?
    { result.elements = matched }
    { result.elements = [matched] }

  result
}

#Parse a string
#If no start rule is given, then whichever rule was defined first will be used.
#By default, the entire string does not have to match.
peg.parse = { str, start_rule = null, fully = false |
  null? start_rule
    { start_rule = my.first }

  my.memo.each_value { v | v.clear }

  s = scanner.new str
  rule = my.named_rules[start_rule]

  null? { ->rule } { throw "No such rule: #{start_rule}" }

  result = rule s

  true? { result && { fully } }
    { s.pos == str.length }
    { result }
}

#Match a sequence of rules
peg.seq = { *rules |
  make_rule { x |
    matched = false
    matches = []
    start = x.pos

    rules.each_while { rule |
      matched = rule x
      matches << matched
      matched
    }

    false? matched
      { x.pos = start; false }
      { peg.make_result start, x.pos, matches }
  }
}

#Match any of a set of rules
peg.any = { *rules |
  make_rule { x |
    matches = []
    start = x.pos

    rules.each_until { opt |
      matched = opt x
      true? matched
        { matches << matched }
    }

    false? matches.empty?
      { peg.make_result start, x.pos, matches }
  }
}

#Match a rule the specified number of times 
peg.num_of = { rule, min, max |
  make_rule { x |
    matches = []
    start = x.pos
      
    while {
      matched = rule x
      true? matched
      { matches << matched }
    }

    true? num_matches >= min
      { null? max
        { peg.make_result matches }
        { true? num_matches <= max
            { peg.make_result start, x.pos, matches }
        }
    }
  }
}

#Match zero or one occurrences of rule
peg.maybe = { rule |
  make_rule { x |
    start = x.pos

    matched = rule x
    true? matched
      { peg.make_result start, x.pos, matched }
      { peg.make_result start, start, "" }
  }
}

#Match zero or more occurrences of rule
peg.kleene = { rule |
  make_rule { x |
    matches = []
    start = x.pos
    
    while {
      res = rule x

      true? res
        { matches << res }
    }

    peg.make_result start, x.pos, matches
  }   
}

#Match one or more occurrences of rule
peg.many = { rule |
  make_rule { x |
    start = x.pos
    matches = []

    matched = rule x

    true? matched
      { matches << matched }
    
    while {
      matched = rule x
      true? matched
        { matches << matched }
    }

    false? matches.empty?
      { peg.make_result start, x.pos, matches }
  }
}

#Match a string literally
peg.str = { literal |
  make_rule { x |
    start = x.pos
    matched = x.scan_string literal
    true? matched
      { peg.make_result start, x.pos, matched }
  }
}

#Match a regular expression
peg.reg = { reg_literal |
  make_rule { x |
    start = x.pos
    matched = x.scan_regex reg_literal
    true? matched
      { peg.make_result start, x.pos, matched }
  }
}

#Specify that a rule should NOT match
peg.no = { rule |
  make_rule { x |
    start = x.pos
    res = rule x
    stop = x.pos
    x.pos = start

    true? res
      { false }
      { peg.make_result start, stop, res }
  }
}

#Specific that a rule should match, but do not advance
#position (lookahead)
peg.and = { rule |
  make_rule { x |
    start = x.pos
    matched = rule x
    stop = x.pos
    x.pos = start
    true? matched
      { peg.make_result start, stop, matched }
  }
}

#Set a named rule
peg.set = { name, rule |
  null? my.first
    { my.first = name }

  my.named_rules[name] = ->rule
}

#Matches one of anything.
#Shortcut for peg.reg /./m
peg.anything = {
  reg /./m
}

#Reference a named rule
peg.ref = { name |
  rules = my.named_rules
  make_rule { x |
    r = rules[name]
    null? { ->r }
      { throw "No such rule: #{name}" }
    r x
  }
}

#Execute action upon match
peg.action = { rule, block |
  make_rule { x |
    res = rule x
    true? res
      { res.with_this ->block; res }
  }
}

export peg, "peg"

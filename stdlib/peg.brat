#* Simple implementation of parsing expression grammar.
  Intended to replace Treetop as the parser for Brat
  but may be used for other purposes, as well.
*#

#Scans through a string, moving the "cursor" when a match occurs.
scanner = object.new

#Initialize with string to match against
scanner.init = { str |
  my.str = str
  my.pos = 0
}

#Attempt to match string against current position. Advances position
#when there is a match.
scanner.scan_string = { matcher |
  patch = my.str[my.pos, my.pos + matcher.length - 1]

  true? patch == matcher
    { 
      my.pos = my.pos + matcher.length
      patch
    }
}

#Attempt to match regex against current position. Advances position
#when there is a match.
scanner.scan_regex = { matcher |
  current = my.pos
  result = my.str.match(matcher, current)

  true? result && { current == result.start_pos }
    {
      my.pos = result.end_pos + 1
      result
    }
}

peg = object.new

peg.init = { gramma |
  my.named_rules = [:]
  my.first = null
  my.rule_id = 0
  my.memo = [:]

  gramma #Actually set up parser
}

peg.next_id = {
  my.rule_id = my.rule_id + 1
}

peg.make_memo = { result, pos |
  m = object.new
  m.result = result
  m.pos = pos
  m
}

peg.make_rule = { rule |
  id = next_id
  memo = my.memo
  memo[id] = [:]

  { x |
    m = memo[id][x.pos]
    true? m
      {
        x.pos = m.pos
        m.result
      }
      {
         current = x.pos
         m = peg.make_memo rule(x) x.pos
         memo[id][current] = m
         m.result
      }
  }
}

peg.make_result = { match_pos, end_pos, matched |
  result = object.new
  result.start_pos = match_pos
  result.end_pos = end_pos
  result.matched = matched
  result.label = null

  when { matched.string? } { result.text = matched }
       { matched.has_method? :full_match } { result.text = matched.full_match }
       { matched.array? } { result.text = matched.map(:text).join }
       { matched.has_method? :text } { result.text = matched.text }
       { true } { result.text = "" }

  true? matched.array?
    { result.elements = matched }
    { result.elements = [matched] }

  result
}

#Parse a string
#If no start rule is given, then whichever rule was defined first will be used.
#By default, the entire string does not have to match.
peg.parse = { str, start_rule = null, fully = false |
  null? start_rule
    { start_rule = my.first }

  my.memo.each_value { v | v.clear }

  s = scanner.new str
  rule = my.named_rules[start_rule]

  null? { ->rule } { throw "No such rule: #{start_rule}" }

  result = rule s

  true? result
    { result.matched_all? = s.pos == str.length }

  true? { result && { fully } }
    { true? result.matched_all?, { result } }
    { result }
}

#Match a sequence of rules
peg.seq = { rule, *rules |
  true? rules.empty?
    { true? function?(->rule) { rules = [->rule] } { rules = rule } }
    { rules.insert 0 ->rule }

  make_rule { x |
    matched = false
    matches = []
    start = x.pos

    rules.each_while { rule |
      matched = rule x
      matches << matched
      matched
    }

    false? matched
      { x.pos = start; false }
      { peg.make_result start, x.pos, matches }
  }
}

peg.seq_ref = { *rules |
  m = my
  seq rules.map { name | m.ref name }
}

#Match any of a set of rules
peg.any = { rule, *rules |
  true? rules.empty?
    { true? function?(->rule) { rules = [->rule] } { rules = rule } }
    { rules.insert 0 ->rule }

  make_rule { x |
    matched = null 
    start = x.pos

    rules.each_until { opt |
      matched = opt x
    }

    true? matched
      { peg.make_result start, x.pos, matched }
  }
}

peg.any_ref = { *rule_names |
  m = my
  any rule_names.map { name | m.ref name }
}

#Match a rule the specified number of times 
peg.num_of = { rule, min, max |
  make_rule { x |
    matches = []
    start = x.pos
      
    while {
      matched = rule x
      true? matched
      { matches << matched }
    }

    true? num_matches >= min
      { null? max
        { peg.make_result matches }
        { true? num_matches <= max
            { peg.make_result start, x.pos, matches }
        }
    }
  }
}

#Match zero or one occurrences of rule
peg.maybe = { rule |
  make_rule { x |
    start = x.pos

    matched = rule x
    true? matched
      { peg.make_result start, x.pos, matched }
      { peg.make_result start, start, "" }
  }
}

#Match zero or more occurrences of rule
peg.kleene = { rule |
  make_rule { x |
    matches = []
    start = x.pos
    
    while {
      res = rule x

      true? res
        { matches << res }
    }

    peg.make_result start, x.pos, matches
  }   
}

#Match one or more occurrences of rule
peg.many = { rule |
  make_rule { x |
    start = x.pos
    matches = []

    matched = rule x

    true? matched
      { matches << matched }
    
    while {
      matched = rule x
      true? matched
        { matches << matched }
    }

    false? matches.empty?
      { peg.make_result start, x.pos, matches }
  }
}

#Match a string literally
peg.str = { literal |
  make_rule { x |
    start = x.pos
    matched = x.scan_string literal
    true? matched
      { peg.make_result start, x.pos, matched }
  }
}

#Match a regular expression
peg.reg = { reg_literal |
  make_rule { x |
    start = x.pos
    matched = x.scan_regex reg_literal
    true? matched
      { peg.make_result start, x.pos, matched }
  }
}

#Specify that a rule should NOT match
peg.no = { rule |
  make_rule { x |
    start = x.pos
    res = rule x
    stop = x.pos
    x.pos = start

    true? res
      { false }
      { peg.make_result start, stop, res }
  }
}

#Specific that a rule should match, but do not advance
#position (lookahead)
peg.and = { rule |
  make_rule { x |
    start = x.pos
    matched = rule x
    stop = x.pos
    x.pos = start
    true? matched
      { peg.make_result start, stop, matched }
  }
}

#Set a named rule
peg.set = { name, rule |
  null? my.first
    { my.first = name }

  my.named_rules[name] = ->rule
}

#Matches one of anything.
#Shortcut for peg.reg /./m
peg.anything = {
  reg /./m
}

#Reference a named rule
peg.ref = { name |
  rules = my.named_rules
  make_rule { x |
    r = rules[name]
    null? { ->r }
      { throw "No such rule: #{name}" }
    r x
  }
}

peg.fetch_labels = { rule |
  labels = []
  true? (rule.has_method?(:label) && { rule.label })
    { labels << rule }

  true? rule.has_method?(:elements)
   { labels + rule.elements.map({ r | peg.fetch_labels r }).compact!.flatten }
   { labels }
}

#Execute action upon match
peg.action = { rule, block |
  make_rule { x |
    res = rule x
    true? res
      {
        labeled_rules = peg.fetch_labels res

        labeled_rules.each { result |
          res.add_method result.label, { result }
        }

        res.with_this ->block; res
      }
  }
}

peg.label = { label, rule |
  make_rule { x |
    res = rule x
    true? res
      { res.label = label; res }
  }
}

peg_syntax = peg.new {
  set :grammar action seq(ref(:rule) kleene(seq_ref :line_break :rule) kleene(any_ref :spaces :line_break)) {
    my.output = { name |
      first = matched[0]
      rest = matched[1]
      "include :peg\n#{name} = peg.new {\n" <<
      "  #{first.output}\n  #{rest.elements.map({ e | e.elements[1].output }).join("\n  ")}" <<
      "\n}\n" <<
      "export #{name}, \"#{name}_parser\""
    }
  }
  
  set :opt_spaces reg /\s*/

  set :spaces reg /( )+/
  
  set :line_break str "\n"
  
  set :rule action seq(ref(:rule_name) ref(:opt_spaces) str("=") ref(:opt_spaces) ref(:rule_list)) {
    my.output = { "set(:#{matched.first.text}, #{matched.last.output})" }
  }

  set :rule_name reg /[a-zA-Z]+/

  set :rule_list action seq(ref(:rule_seq) kleene(seq ref(:opt_spaces) str("|") ref(:opt_spaces) ref(:rule_seq))) {
    my.output = {
      first = matched.first
      rest = matched.last

      true? rest.elements.empty?
        {
          first.output
        }
        {
          options = rest.elements.map { r |
            r.elements.last.output
          }

          "any(#{first.output}, #{options.join ','})"
        }
    }
  }

  set :rule_seq action seq(ref(:rule_exp) kleene(seq_ref :spaces :rule_exp)) {
    my.output = {
      first = matched.first
      rest = matched.last

      true? rest.elements.empty?
        {
          first.output
        }
        {
          "seq(#{first.output}, #{rest.elements.map({ e | e.elements.last.output }).join(',')})"
        }
    }
  }

  set :rule_exp action any_ref(:maybe :many :kleene :not :simple_rule_exp) {
    my.output = {
      matched.output
    }
  }

  set :simple_rule_exp action any_ref(:label :str_literal :rule_ref :reg_literal :anything :paren_rule) {
    my.output = {
      matched.output
    }
  }

  set :paren_rule action seq(str("(") ref(:rule_list) str(")")) {
    my.output = matched[1].output
  }

  set :str_literal action seq(str('"') kleene(seq(no(str '"') anything)) str('"')) {
    my.output = {
      "str(#{text})"
    }
  }
  
  set :rule_ref action label(:name ref(:rule_name)) {
    my.output = {
      "ref(:#{name.text})"
    }
  }

  set :reg_literal action seq(str('/') kleene(seq(no(str '/') anything)) str('/')) {
    my.output = {
      "reg(#{text})"
    }
  }

  set :anything action str(".") {
    my.output = "anything()"
  }

  set :label action seq(label(:name ref(:rule_name)) str(":") label(:exp ref(:rule_exp))) {
    my.output = {
      "label(:#{name.text} #{exp.output})"
    }
  }

  set :maybe action seq(ref(:simple_rule_exp) str("?")) {
    my.output = {
      "maybe(#{matched.first.output})"
    }
  }

  set :many action seq(ref(:simple_rule_exp) str("+")) {
    my.output = {
      "many(#{matched.first.output})"
    }
  }

  set :kleene action seq(ref(:simple_rule_exp) str("*")) {
    my.output = {
      "kleene(#{matched.first.output})"
    }
  }

  set :not action seq(str("!") ref(:simple_rule_exp)) {
    my.output = {
      "no(#{matched.last.output})"
    }
  }

  set :action action seq(str("{") kleene(any(reg(/[^{}]+/) ref(:action))) str("}")) {
    my.output = my.text
  }
}

peg.make_parser = { name, grammar |
  result = peg_syntax.parse grammar

  true? result
    { true? result.matched_all?
      { result.output name }
      {
        last_line = result.text.split("\n").last
        p "Error parsing around: #{last_line}"
      }
    }
    { p "Could not parse." }
}

export peg, "peg"

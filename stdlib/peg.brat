#* Simple implementation of parsing expression grammar.
  Intended to replace Treetop as the parser for Brat
  but may be used for other purposes, as well.
*#

include 'scanner'

peg = object.new

peg.init = { gramma |
  my.named_rules = [:]
  my.first = null
  my.rule_id = 0
  my.memo = [:]

  gramma #Actually set up parser
}

peg.prototype.next_id = {
  my.rule_id = my.rule_id + 1
}

peg.make_memo = { result, pos |
  m = object.new
  m.result = result
  m.pos = pos
  m
}

peg.prototype.make_rule = { rule |
  id = next_id
  memo = my.memo
  memo[id] = [:]

  { x |
    m = memo[id][x.pos]
    true? m
      {
        x.pos = m.pos
        m.result
      }
      {
         current = x.pos
         m = peg.make_memo rule(x) x.pos
         memo[id][current] = m
         m.result
      }
  }
}

peg.make_result = { match_pos, end_pos, matched |
  result = object.new
  result.start_pos = match_pos
  result.end_pos = end_pos
  result.matched = matched
  result.label = null

  when { matched.string? } { result.text = matched }
       { matched.has_method? :full_match } { result.text = matched.full_match }
       { matched.array? } { result.text = matched.map(:text).join }
       { matched.has_method? :text } { result.text = matched.text }
       { true } { result.text = "" }

  true? matched.array?
    { result.elements = matched }
    { result.elements = [matched] }

  result
}

#Parse a string
#If no start rule is given, then whichever rule was defined first will be used.
#By default, the entire string does not have to match.
peg.prototype.parse = { str, start_rule = null, fully = false |
  null? start_rule
    { start_rule = my.first }

  my.memo.each_value { v | v.clear }

  s = scanner.new str
  rule = my.named_rules[start_rule]

  null? { ->rule } { throw "No such rule: #{start_rule}" }

  result = rule s

  true? result
    { result.matched_all? = s.pos == str.length }

  true? { result && { fully } }
    { true? result.matched_all?, { result } }
    { result }
}

#Match a sequence of rules
peg.prototype.seq = { rule, *rules |
  true? rules.empty?
    { true? function?(->rule) { rules = [->rule] } { rules = rule } }
    { rules = [->rule] + rules }

  make_rule { x |
    matched = false
    matches = []
    start = x.pos

    rules.each_while { rule |
      matched = rule x
      matches << matched
      matched
    }

    false? matched
      { x.pos = start; false }
      { peg.make_result start, x.pos, matches }
  }
}

peg.prototype.seq_ref = { *rules |
  m = my
  seq rules.map { name | m.ref name }
}

#Match any of a set of rules
peg.prototype.any = { rule, *rules |
  true? rules.empty?
    { true? function?(->rule) { rules = [->rule] } { rules = rule } }
    { rules = [->rule] + rules }

  make_rule { x |
    matched = null 
    start = x.pos

    rules.each_until { opt |
      matched = opt x
    }

    true? matched
      { peg.make_result start, x.pos, matched }
  }
}

peg.prototype.any_ref = { *rule_names |
  m = my
  any rule_names.map { name | m.ref name }
}

#Match a rule the specified number of times 
peg.prototype.num_of = { rule, min, max |
  make_rule { x |
    matches = []
    start = x.pos
      
    while {
      matched = rule x
      true? matched
      { matches << matched }
    }

    true? num_matches >= min
      { null? max
        { peg.make_result matches }
        { true? num_matches <= max
            { peg.make_result start, x.pos, matches }
        }
    }
  }
}

#Match zero or one occurrences of rule
peg.prototype.maybe = { rule |
  make_rule { x |
    start = x.pos

    matched = rule x
    true? matched
      { peg.make_result start, x.pos, matched }
      { peg.make_result start, start, "" }
  }
}

#Match zero or more occurrences of rule
peg.prototype.kleene = { rule |
  make_rule { x |
    matches = []
    start = x.pos
    
    while {
      res = rule x

      true? res
        { matches << res }
    }

    peg.make_result start, x.pos, matches
  }   
}

#Match one or more occurrences of rule
peg.prototype.many = { rule |
  make_rule { x |
    start = x.pos
    matches = []

    matched = rule x

    true? matched
      { matches << matched }
    
    while {
      matched = rule x
      true? matched
        { matches << matched }
    }

    false? matches.empty?
      { peg.make_result start, x.pos, matches }
  }
}

#Match a string literally
peg.prototype.str = { literal |
  make_rule { x |
    start = x.pos
    matched = x.scan_string literal
    true? matched
      { peg.make_result start, x.pos, matched }
  }
}

#Match a regular expression
peg.prototype.reg = { reg_literal |
  make_rule { x |
    start = x.pos
    matched = x.scan_regex reg_literal
    true? matched
      { peg.make_result start, x.pos, matched }
  }
}

#Specify that a rule should NOT match
peg.prototype.no = { rule |
  make_rule { x |
    start = x.pos
    res = rule x
    stop = x.pos
    x.pos = start

    true? res
      { false }
      { peg.make_result start, stop, res }
  }
}

#Specific that a rule should match, but do not advance
#position (lookahead)
peg.prototype.and = { rule |
  make_rule { x |
    start = x.pos
    matched = rule x
    stop = x.pos
    x.pos = start
    true? matched
      { peg.make_result start, stop, matched }
  }
}

#Set a named rule
peg.prototype.set = { name, rule |
  null? my.first
    { my.first = name }

  my.named_rules[name] = ->rule
}

#Matches one of anything.
#Shortcut for peg.reg /./m
peg.prototype.anything = {
  reg /./m
}

#Reference a named rule
peg.prototype.ref = { name |
  rules = my.named_rules
  make_rule { x |
    r = rules[name]
    null? { ->r }
      { throw "No such rule: #{name}" }
    r x
  }
}

peg.fetch_labels = { rule |
  labels = []
  true? (rule.has_method?(:label) && { rule.label })
    { labels << rule }

  true? rule.has_method?(:elements)
   { labels + rule.elements.map({ r | peg.fetch_labels r }).compact!.flatten }
   { labels }
}

#Execute action upon match
peg.prototype.action = { rule, block |
  make_rule { x |
    res = rule x
    true? res
      {
        labeled_rules = peg.fetch_labels res

        labeled_rules.each { result |
          res.add_method result.label, { result }
        }

        res.with_this ->block; res
      }
  }
}

peg.prototype.label = { label, rule |
  make_rule { x |
    res = rule x
    true? res
      { res.label = label; res }
  }
}

#This is a PEG for parsing PEGs
peg_syntax = peg.new {
  #A grammar is a list of rules
  set :grammar action many(ref :line) {
    my.output = { name |
      "include :peg\n#{name} = peg.new {\n" <<
      matched.map({ e | e.output }).join("\n  ") <<
      "\n}\n" <<
      "export #{name}, \"#{name}_parser\""
    }
  }

  set :line action seq(any_ref(:rule :comment) any(ref(:line_break) no(anything))) {
    my.output = matched.first.matched.output
  }

  set :comment action seq(str("#") kleene(seq no(str("\n")) anything)) {
    my.output = ""
  }
  
  #Optional spaces
  set :opt_spaces reg /\s*/

  #Required spaces
  set :spaces reg /( )+/
  
  #Multiple line breaks
  set :line_break many(str("\n"))
  
  #A rule looks like:
  #  name = list of rule items
  set :rule action seq(ref(:rule_name) ref(:opt_spaces) str("=") ref(:opt_spaces) ref(:rule_list) reg(/( )*/)) {
    my.output = { "set(:#{matched.first.text}, #{matched[-2].output})" }
  }

  #A rule name can only contain word characters
  set :rule_name reg /\w+/

  #A rule list is a sequence of optional rules, separated by |
  set :rule_list action seq(ref(:rule_seq) kleene(seq ref(:opt_spaces) str("|") ref(:opt_spaces) ref(:rule_seq))) {
    my.output = {
      first = matched.first
      rest = matched.last

      true? rest.elements.empty?
        {
          first.output
        }
        {
          options = rest.elements.map { r |
            r.elements.last.output
          }

          "any(#{first.output}, #{options.join ','})"
        }
    }
  }

  #Matches a sequence of basic matchers separated by spaces
  set :rule_seq action seq(ref(:rule_exp) kleene(seq_ref :spaces :rule_exp) maybe(seq_ref(:spaces :action))) {
    my.output = {
      first = matched.first
      rest = matched[1]
      act = false? matched[2].matched == ""
              { matched[2].matched.elements.last }
              { null }

      out = true? rest.elements.empty?
            {
              first.output
            }
            {
              "seq(#{first.output}, #{rest.elements.map({ e | e.elements.last.output }).join(',')})"
            }

      null? act
        { out }
        { "action(#{out}, #{act.output})" }
    }
  }

  #A rule expression is an actual matcher or grouping
  set :rule_exp action any_ref(:maybe :many :kleene :not :and :simple_rule_exp) {
    my.output = matched.output
  }

  #Simple rules (i.e., not suffixed rules like + or *)
  set :simple_rule_exp action any_ref(:label :str_literal :rule_ref :reg_literal :anything :paren_rule) {
    my.output = matched.output
  }

  #Matches parentheses, which denote priority
  set :paren_rule action seq(str("(") ref(:rule_list) str(")")) {
    my.output = matched[1].output
  }

  #Matches a string literal
  set :str_literal action seq(str('"') kleene(any str('\"') seq(no(str '"') anything)) str('"')) {
    my.output = "str(#{text})"
  }
  
  #References the name of another rule
  set :rule_ref action label(:name ref(:rule_name)) {
    my.output = "ref(:#{name.text})"
  }

  #Matches a regular expression
  set :reg_literal action seq(str('/') kleene(any str('\/') seq(no(str '/') anything)) str('/')) {
    my.output = "reg(#{text})"
  }

  #Matches a period
  set :anything action seq(str(".") maybe(ref :spaces)) {
    my.output = "anything()"
  }

  #Matches a label (but labels aren't really working currently)
  set :label action seq(label(:name ref(:rule_name)) str(":") label(:exp ref(:rule_exp))) {
    my.output = "label(:#{name.text} #{exp.output})"
  }

  #Matches an optional rule:
  #  some_rule?
  set :maybe action seq(ref(:simple_rule_exp) str("?")) {
    my.output = "maybe(#{matched.first.output})"
  }

  #Matches one or more of a rule:
  #  some_rule+
  set :many action seq(ref(:simple_rule_exp) str("+")) {
    my.output = "many(#{matched.first.output})"
  }

  #Matches zero or more of a rule:
  #  some_rule*
  set :kleene action seq(ref(:simple_rule_exp) str("*")) {
    my.output = "kleene(#{matched.first.output})"
  }

  #Matches a negative lookahead:
  #  !some_rule
  set :not action seq(str("!") ref(:simple_rule_exp)) {
    my.output = "no(#{matched.last.output})"
  }

  #Matches positive lookahead:
  #  &some_rule
  set :and action seq(str("&") ref(:simple_rule_exp)) {
    my.output = {
      "and(#{matched.last.output})"
    }
  }

  #Matches an action appended to a rule:
  #  some_rule { ... }
  set :action action seq(str("{") kleene(any(reg(/[^{}]+/) ref(:action))) str("}")) {
    my.output = my.text
  }
}

#Generates a parser with the given name from the PEG syntax passed in
peg.make_parser = { name, grammar, *included |
  result = peg_syntax.parse grammar
  include_files = true? included.empty?
                    { "" }
                    { "includes #{included.map({ i | ':' << i }).join(' ')}\n" }


  true? result
    { true? result.matched_all?
      { include_files << result.output(name) }
      {
        last_line = result.text.split("\n").last
        p "Error parsing around: #{last_line}"
      }
    }
    { p "Could not parse." }
}

export peg, "peg"

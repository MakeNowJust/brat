@brat = $loader.loadmodule("core", $loader);

subprocess = @brat.new_brat(null);
child = @brat.new_brat(null);
child.@subproc = null;
child.@command = null;
child.@args = null;
subprocess.new = $varargs(function(args) {
	var arglen = $asize(args);
	if(arglen == 0) {
		var p = @brat.new_brat(child);
		p.@subproc = null;
		p;
	}
	else if(arglen == 1 && $typeof(args[0]) == $tobject &&@brat.has_field(args[0], "@neko_string")) {
		var p = @brat.new_brat(child);
		p.@command = args[0].@neko_string();
		p.@subproc = null;
		p;
	}
	else if(arglen == 2 && $typeof(args[0]) == $tobject && $typeof(args[1]) == $tobject &&@brat.has_field(args[0], "@neko_string") &&@brat.has_field(args[1], "@neko_array")) {
		var p = @brat.new_brat(child);
		p.@command = args[0].@neko_string();
		p.@subproc = null;
		p.@args = args[1].@neko_array();
	
		var i = 0;
		var l = $asize(p.@args);
		while(i < l) {
			if($typeof(p.@args[i]) == $tobject && @brat.has_field(p.@args[i], "@neko_string"))
				p.@args[i] = p.@args[i].@neko_string();
			else
				$throw("Expected string for argument to child.");
			i = i + 1;
		}

		p;
	}
	else
		$throw("Invalid arguments to child.new");
});

run = $loader.loadprim("std@process_run", 2);
subprocess.run = $varargs(function(args) {
	var arglen = $asize(args);
	if(arglen == 0) {
		$throw(@brat.base_exception.argument_error("run", "at least 1", arglen));
	}
	else {
		var sub = $call(subprocess.new, subprocess, args);
		sub.run();
	}
});

sys_fork = $loader.loadprim("core-util@sys_fork", 0);
sys_exit = $loader.loadprim("std@sys_exit", 1);
subprocess.fork = $varargs(function(args) {
	var arglen = $asize(args);
	if(arglen == 0) {
		var pid = sys_fork();
		pid;
	}
	else if(arglen == 1) {
		var block = args[0];
		if($typeof(block) != $tfunction)
			$throw(@brat.base_exception.argument_error("fork", "a function", block));
		
		var pid = sys_fork();
		if(pid == 0) {
			block();
			sys_exit(0);
		}
		else {
			pid;
		}
	}
	else
		$throw(@brat.base_exception.argument_error("fork", "a function or no", args));

})

sys_wait = $loader.loadprim("core-util@sys_wait", 0);
sys_waitpid = $loader.loadprim("core-util@sys_waitpid", 1);
subprocess.wait = $varargs(function(args) {
	var arglen = $asize(args);
	if(arglen == 0)
		sys_wait();
	else if(arglen == 1) {
		var pid = args[0];
		if($typeof(pid) == $tint)
			sys_waitpid(pid);
		else
			$throw(@brat.base_exception.argument_error("wait", "number", pid));
	}
	else
		$throw(@brat.base_exception.argument_error("wait", "number", args));

})

child.run = function() {
	if(this.@command == null) {
			$throw("No program name given for child.");
		}
	else {
		if(this.@args == null) {
			this.@subproc = run(this.@command, $amake(0));
		}
		else {
			this.@subproc = run(this.@command, this.@args);
		}
	}
	this;
}


read_stdout = $loader.loadprim("std@process_stdout_read", 4);
child.read@underline = function() {
	if(this.@subproc == null)
		$throw("No process has been started to read from.");

	if(this.@in_buffer == null || $ssize(this.@in_buffer) == 0) {
		var temp = $smake(1024);
		var read = read_stdout(this.@subproc, temp, 0, 1024);
		
		this.@in_buffer = $ssub(temp, 0, read);
	}

	var lineend = $sfind(this.@in_buffer, 0, "\n");
	if(lineend == null) {
		var temp = $smake(1024);
		var read = read_stdout(this.@subproc, temp, 0, 1024);
		
		var bsize = $ssize(this.@in_buffer);
		this.@in_buffer = $smake(read + bsize);
		$sblit(this.@in_buffer, bsize, temp, 0, read);
		
		this.read@underline();
	}
	else {
		var res = @brat.base_string.new($ssub(this.@in_buffer, 0, lineend));
		this.@in_buffer = $ssub(this.@in_buffer, lineend + 1, $ssize(this.@in_buffer) - lineend - 1);
		res;
	}
}

read_stderr = $loader.loadprim("std@process_stderr_read", 4);
child.read@undererr@underline = function() {
	if(this.@subproc == null)
		$throw("No process has been started to read from.");

	if(this.@err_buffer == null || $ssize(this.@err_buffer) == 0) {
		var temp = $smake(1024);
		var read = read_stderr(this.@subproc, temp, 0, 1024);
		
		this.@err_buffer = $ssub(temp, 0, read);
	}

	var lineend = $sfind(this.@err_buffer, 0, "\n");
	if(lineend == null) {
		var temp = $smake(1024);
		var read = read_stderr(this.@subproc, temp, 0, 1024);
		
		var bsize = $ssize(this.@err_buffer);
		this.@err_buffer = $smake(read + bsize);
		$sblit(this.@err_buffer, bsize, temp, 0, read);
		
		this.read@undererr@underline();
	}
	else {
		var res = @brat.base_string.new($ssub(this.@err_buffer, 0, lineend));
		this.@err_buffer = $ssub(this.@err_buffer, lineend + 1, $ssize(this.@err_buffer) - lineend - 1);
		res;
	}
}

child.read = function(length) {
	if(this.@subproc == null)
		$throw("No process has been started to read from.");

	if($typeof(length) != $tint) {
		$throw("Expected integer for child.read(), not " + $string(length));
	}

	if(this.@in_buffer != null && $ssize(this.@in_buffer) > 0) {
		var bsize = $ssize(this.@in_buffer);
		if(bsize == length) {
			var res = @brat.base_string.new(this.@in_buffer);
			this.@in_buffer = null;
			res;
		}
		else if(bsize > length) {
			var res = @brat.base_string.new($ssub(this.@in_buffer, 0, length));
			this.@in_buffer = $ssub(this.@in_buffer, length, bsize - length);
			res;
		}
		else if(bsize < length) {
			var temp = $smake(length - bsize);
			var l = read_stdout(this.@subproc, temp, 0, length - bsize);
			var res_temp = $smake(bsize + l);
			$sblit(res_temp, 0, this.@in_buffer, 0, bsize);
			$sblit(res_temp, bsize, temp, 0, l);
			this.@in_buffer = null;
			@brat.base_string.new(res_temp);  
		}
	}
	else {
		var temp = $smake(length);
		var l = read_stdout(this.@subproc, temp, 0, length);
		if(l == 0)
			@brat.base_string.new("");
		else
			@brat.base_string.new($ssub(temp, 0, l));
	}	
}

child.read@undererr = function(length) {
	if(this.@subproc == null)
		$throw("No process has been started to read from.");

	if($typeof(length) != $tint) {
		$throw("Expected integer for child.read(), not " + $string(length));
	}

	if(this.@err_buffer != null && $ssize(this.@err_buffer) > 0) {
		var bsize = $ssize(this.@err_buffer);
		if(bsize == length) {
			var res = @brat.base_string.new(this.@err_buffer);
			this.@err_buffer = null;
			res;
		}
		else if(bsize > length) {
			var res = @brat.base_string.new($ssub(this.@err_buffer, 0, length));
			this.@err_buffer = $ssub(this.@err_buffer, length, bsize - length);
			res;
		}
		else if(bsize < length) {
			var temp = $smake(length - bsize);
			var l = read_stderr(this.@subproc, temp, 0, length - bsize);
			var res_temp = $smake(bsize + l);
			$sblit(res_temp, 0, this.@err_buffer, 0, bsize);
			$sblit(res_temp, bsize, temp, 0, l);
			this.@err_buffer = null;
			@brat.base_string.new(res_temp);  
		}
	}
	else {
		var temp = $smake(length);
		var l = read_stderr(this.@subproc, temp, 0, length);
		if(l == 0)
			@brat.base_string.new("");
		else
			@brat.base_string.new($ssub(temp, 0, l));
	}	
}

child.each@underline = function(block) {
	if($typeof(block) != $tfunction)
		$throw("Expected a function.");

	var res;
	while(this.@subproc != null) {
		try {
			res = this.read@underline();
		}
		catch e {
			break;
		}
		
		block(res);
	}
}

child.each@undererr@underline = function(block) {
	if($typeof(block) != $tfunction)
		$throw("Expected a function.");

	var res;
	while(this.@subproc != null) {
		try {
			res = this.read@undererr@underline();
		}
		catch e {
			break;
		}
		
		block(res);
	}
}

write = $loader.loadprim("std@process_stdin_write", 4);
child.write = function(message) {
	if(this.@subproc == null)
		$throw("No process has been started.");

	if($typeof(message) == $tobject && @brat.has_field(message, "@neko_string")) {
		message = message.@neko_string();
	}
	if($typeof(message) != $tstring) {
		$throw("Can only write out strings to child.");
	}

	write(this.@subproc, message, 0, $ssize(message));
}

child.write@underline = function(message) {
	if($typeof(message) == $tobject && @brat.has_field(message, "@neko_string")) {
		message = message.@neko_string();
	}
	if($typeof(message) != $tstring) {
		$throw("Can only write out strings to child.");
	}

	var temp = $smake($ssize(message) + 1);
	$sblit(temp, 0, message, 0, $ssize(message));
	$sblit(temp, $ssize(temp) - 1, "\n", 0, 1);
	$print("Writing: ", temp);
	this.write(temp);
}

wait = $loader.loadprim("std@process_exit", 1);
child.join = function() {
	if(this.@subproc != null)
		wait(this.@subproc);

	@brat.@@null;
}

close = $loader.loadprim("std@process_close", 1);
child.close = function() {
	if(this.@subproc != null)
		close(this.@subproc);

	this.@subproc = null;
	@brat.@@null;
}

pid = $loader.loadprim("std@process_pid", 1);
child.pid = function() {
	if(this.@subproc == null)
		$throw("No process yet, no pid.");

	if(this.@pid)
		this.@pid;
	else
		this.@pid = pid(this.@subproc);
}

kill = $loader.loadprim("std@process_kill", 1);
child.stop = function() {
	if(this.@subproc != null) {
		kill(this.@subproc);
		@brat.@@true;
	}
	else
		@brat.@@null;
} 

$exports.subprocess = subprocess;

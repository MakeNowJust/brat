@brat = $loader.loadmodule("core", $loader);

file_exists = $loader.loadprim("std@sys_exists", 1);
file@underexists@question = function(path) {
	if($objget(path, $hash("@neko_string")) != null)
		path = path.@value;
	if($typeof(path) != $tstring)
		$throw("Expected string for file_exists?, was given " + $string(path));

	if(file_exists(path))
		@brat.base_object.@@true;
	else
		@brat.base_object.@@false;
}

file_delete = $loader.loadprim("std@file_delete", 1);
file@underdelete = function(path) {
	if(file@underexists@question(path) == @brat.base_object.@@true) {
		file_delete(path.@value);
		@brat.base_object.@@true;
	}
	else {
		@brat.base_object.@@false;
	}
}

file_rename = $loader.loadprim("std@sys_rename", 2);
file@underrename = function(opath, npath) {
	if(file@underexists@question(opath) == @brat.base_object.@@true) {
		file_rename(opath.@value, npath.@value);
		@brat.base_object.@@true;
	}
	else {
		@brat.base_object.@@false;
	}
}

create_dir = $loader.loadprim("std@sys_create_dir", 2);
make@underdir = function(path) {
	if($objget(path, $hash("@neko_string")) != null)
		path = path.@value;
	if($typeof(path) != $tstring)
		$throw("Expected string for make_dir, was given " + $string(path));

	create_dir(path, 755);
	@brat.base_object.@@null;
}

delete_dir = $loader.loadprim("std@sys_remove_dir", 1);
delete@underdir = function(path) {
	if(file@underexists@question(path) == @brat.base_object.@@true) {
		delete_dir(path.@value);
		@brat.base_object.@@true;
	}
	else {
		@brat.base_object.@@false;
	}
}

file_type = $loader.loadprim("std@sys_file_type", 1);
file@undertype = function(path) {
	if($objget(path, $hash("@neko_string")) != null)
		path = path.@value;
	if($typeof(path) != $tstring)
		$throw("Expected string for file_type, was given " + $string(path));

	if(file_exists(path)) {
		@brat.base_string.new(file_type(path));
	}
	else {
		@brat.base_object.@@null;
	}
}

fslurp = $loader.loadprim("std@file_contents", 1);
file@underslurp = function(path) {
	if($objget(path, $hash("@neko_string")) != null)
		path = path.@value;
	else
		path = path;

	if($typeof(path) == $tstring)
		@brat.base_string.new(fslurp(path));
	else
		$throw("File name should be a string for file_slurp().");
}

file = @brat.base_object.new();
file.@file = null;
file_open = $loader.loadprim("std@file_open", 2);

file.new = function(path) {
	var f = @brat.new_brat(this);
	if($objget(path, $hash("@neko_string")) != null)
		path = path.@value;
	if($typeof(path) != $tstring)
		$throw("Expected string for file.new, was given " + $string(path));

	if(file_exists(path))
		f.@file = file_open(path, "r+");
	else
		f.@file = file_open(path, "w+");

	f;
}

file@underopen = $varargs(function(args) {
	var arglen = $asize(args);

	if(arglen < 1)
		$throw("File.open expects at least one argument.");
	else if(arglen == 1)
		file.new(args[0]);
	else if(arglen == 2) {
		var path = args[0];
		if($typeof(path) == $tobject && $objget(path, $hash("@neko_string")) != null)
			path = path.@value;

		if($typeof(path) != $tstring)
			$throw("File.open expects string for path.");

		if($typeof(args[1]) != $tfunction)
			$throw("File.open expects function for second argument.");

		var f = file.new(path);
		var res = args[1](f);
		f.close();
		res;
	}
	else
		$throw("Wrong number of arguments for file.open. Expects 1 or 2.");
});

file_close = $loader.loadprim("std@file_close", 1);
file.close = function() {
	if($not(this.@file == null)) {
		file_close(this.@file);
		this.@file = null;
	}
	@brat.base_object.@@null;
}

file.closed@question = function() {
	if(this.@file == null)
		@brat.base_object.@@true;
	else
		@brat.base_object.@@false;
}

file.open@question = function() {
	if(this.@file == null)
		@brat.base_object.@@false;
	else
		@brat.base_object.@@true;
}


file.path = function() {
	if(this.@file == null)
		$throw("No file opened.");
	else
		@brat.base_string.new(fname(this.@file));
}

read_line = $loader.loadprim("std@file_gets", 1);
buffer_string = $loader.loadprim("std@buffer_string", 1);
file_eof = $loader.loadprim("std@file_eof", 1);

file.read@underline = function() {
	var f = this.@file;
	if(f == null)
		$throw("No file opened.");

	if($not(file_eof(f))) {
		try {
			line = read_line(f);
		}
		catch e {
			return @brat.base_object.@@null;
		}

	};

	@brat.base_string.new(line);
}

file.each@underline = function(block) {
	if($typeof(block) != $tfunction || $nargs(block) != 1)
		$throw("File.each_line takes a block with a single argument.");

	var line;
	var f = this.@file;
	while($not(file_eof(f))) {
		block(this.read@underline());
	}
}

file.eof@question = function() {
	if(this.@file == null || file_eof(this.@file))
		@brat.base_object.@@true;
	else
		@brat.base_object.@@false;
}

$exports.file = file;
$exports.file@underexists@question = file@underexists@question;
$exports.file@underdelete = file@underdelete;
$exports.file@underrename = file@underrename;
$exports.make@underdir = make@underdir;
$exports.delete@underdir = delete@underdir;
$exports.file@undertype = file@undertype;
$exports.file@underslurp = file@underslurp;
$exports.file@underopen = file@underopen;

e = object.new

e.init = {
  my.variables = [[:]]
  my.unset = [[]]
  my.variable_type = [:]
  my.next_temp = 0
}

e.next_var = {
  w = my
  my.temp = (next_unset || { "_temp#{w.next_temp + 1}" })
}

e.next_unset = {
  my.unset.last.pop
}

e.new_scope = {
  my.unset << []
  my.variables << [:]
}

e.pop_scope = {
  my.variables.pop
  my.unset.pop
}

e.new_var = { var |
  my.variables.last[var] = next_var
}

e.local_var? = { var |
  my.variables.last[var]
}

e.get = { var |
  v = null
  my.variables.reverse_each_while { vars |
    v = vars[var]
    v.null?
  }
  v
}

e.set = { var, val |
  my.variables.last[var] = val
}

e.set_type = { var, type |
  my.variable_type[var] = type
}

e.get_type = { var |
  my.variable_type[var]
}

e.do_scope = {
    my.unset << []
  }

e.endo_scope = {
  my.unset.pop
}


export e, :env

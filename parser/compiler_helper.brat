h = object.new

h.callable? = { name |
  "_type(#{name}) == \"function\" or (_type(#{name}) == \"table\" and _rawget(#{name}, \"__call_thing\"))"
}

h.get_action = { res_var |
  true? res_var == '_return_'
    { res_var = null }

  true? res_var
    { "#{res_var} = " }
    { "return " }
}

invoke = { node, invoke_meth, var = null |
  res = set_result var
  w = my
  args = node.args.map { n | w.process n }
  res.out << args.map({ a | a.out }).join("\n")
  res.out << invoke_meth node.method, args.map({ a | a.var }), var
  r res
}

h.invoke_local = { name, args, res_var |
  args = (["_self"] + args).join(", ")
  temp = my.env[name]

  action = get_action res_var

  call_it = "#{action} #{temp}(#{args})\n"

  nonmethod_error = "_error(exception:new(\"Tried to invoke non-method: '#{name}' (\" .. object.__type(#{temp}) .. \")\"))"

  t = my.env.get_type temp

  true? t
   {
    true? t == :function
      { call_it }
      {
        nonmethod_error
      }
   }
   {
    "
    if #{callable? temp} then
      #{call_it}
    elseif #{temp} then
      #{action} #{temp}(#{args})
    else
      #{nonmethod_error}
    end
    "
  }
}

h.invoke_self = { name, args, res_var |
  arg_list = args.join(", ")

  action = get_action res_var

  "
    if #{callable? "_self.#{name}"} then
      #{action} _self:#{name}(#{arg_list})
    else
      _error(exception:method_error(_self, '#{name}'))
    end
  "
}

h.get_local_value = { name, res_var |
  temp = my.env[name]

  action = get_action res_var

  call_it = "#{action} #{temp}(_self)\n"

  t = my.env.get_type temp

  true? t
   {
    true? t == :function
      { call_it }
      {
        true? res_var
          { my.env.set_type res_var, t }

        "#{action} #{temp}\n"
      }
   }
   {
    "
    if #{callable? temp} then
      #{call_it}
    elseif #{temp} then
      #{action} #{temp}
    else
      _error(exception:name_error(\"#{name}\"))
    end
    "
  }
}

h.get_value = { name, res_var |
  true? res_var == '_return_'
    { res_var = null }

  action = true? res_var
            { "#{res_var} =" }
            { "return" }

  call_it = "#{action} #{name}(_self)\n"

  "
   local _m = _self[\"#{name}\"]
   if #{callable? '_m'} then
     #{action} _m(_self)
   elseif _m then
     #{action} _m
   else
     _error(exception:name_error(\"#{name}\"))
   end
  "
}

h.set_result = { var = null, initial = null |
  res = object.new
  res.out = ''
  res.var = var

  null? res.var
    { res.var = my.env.next_unset }

  null? res.var
    {
      res.var = my.env.next_var
      res.out = true? initial
              { "local #{res.var} = #{initial}\n" }
              { "local #{res.var}\n" }
    }
    {
      true? initial
        { res.out = "#{res.var} = #{initial}\n" }
    }

  res
}

h.r = { result_var, output = null, extras = [:] |
  true? (output.null? && { result_var.object? })
    {
      result_var.get = { v | null }
      result_var
    }
    {
      o = object.new
      o.var = result_var
      o.out = output
      o.get = { v | extras[v] }
      o
    }
}

export h, :compiler_helper

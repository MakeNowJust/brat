include 'parser/sexp'

node = object.new
node.prototype [
    init: { name |
            my.node_name = name
            export my, name
          }
    to_s: { "<#{my.node_name}: #{my.matched}>" }
]

each_ast = { elements, block |
  elements.each { e |
    when { e.has_method?(:ast)} { block e.ast }
         { e.has_method?(:elements) } { each_ast e.elements, ->block }
  }
}

add_ast = { node, list |
  each_ast node.elements, { ast |
    true? ast
      { list << ast }
  }

  list
}

ast = { name, block |
  n = node.new name
  n.ast = ->block
}

ast :program {
  out = s[:program]
  add_ast my, out
}

ast :simple_exp {
  a = null
  each_ast my.elements, { ast | a = ast }
  a
}

ast :bnumber {
  s[:number text.to_f]
}

ast :empty_array {
  s[:array]
}

ast :barray {
  s[:array].concat inner.ast
}

ast :array_inner {
  list = [my.first.ast]

  my.rest.elements.each { e |
    add_ast e, list
  }
  list
}

ast :empty_hash {
  s[:hash]
}

ast :bhash {
  s[:hash].concat inner.ast
}

ast :hash_arg {
  s[my.key.ast, my.value.ast]
}

ast :hash_key_arg {
  [s[:string my.key.text], my.value.ast]
}

ast :bregex {
  s[:regex my.text]
}

ast :simple_string {
  s[:string my.svalue.text]
}

ast :string_interp {
  list = []
  values.matched.each { e |
    true? e.has_method?(:node_name) && { e.node_name == "interp_value" }
      { list << e.ast }
      {
        # Combine consecutive strings into one string
        true? sexp?(list.last) && { list.last.name == :string }
          { list.last.last << e.text }
          { list << s[:string e.text] }
      }
  }

  # If just one simple string, return that
  true? list.length == 1 && { list[0].name == :string }
    { list[0] }
    { s[:string_interp].concat list }
}

ast :interp_value {
  value = s[:string_eval]

  true? first, {
    add_ast first, value
  }

  add_ast rest, value
}

ast :bfunction {
  list = s[:function]

  arg_list = []
  add_ast args, arg_list

  body_ast = []
  add_ast body, body_ast

  true? arg_list.empty?
  {
    false? body_ast.empty?
      { list << null << body_ast }
  }
  {
    list << arg_list

    false? body_ast.empty?
    { list << body_ast }
  }

  list
}

ast :plain_arg {
  s[:arg my.text]
}

ast :default_arg {
  s[:def_arg, my.arg_var.text, my.arg_val.ast]
}

ast :variable_args {
  s[:var_arg my.arg_var.text]
}

ast :unary_op {
  list = s[:call]

  add_ast my, list

  list << my.elements[1].text
}

ast :inner_arg_list {
  list = []

  add_ast my, list
}

ast :simple_call {
  args = []

  add_ast my, args

  var = my.elements.first.text

  true? args.empty?
    { s[:get_value var] }
    { s[:call, null, var, args.first] }
}

ast :chain_call {
  list = s[:call]

  list << my.elements.first.ast

  list << my.elements[1].text

  add_ast my.elements.last, list
}

ast :simple_meth_lhs {
  args = []

  add_ast my.args, args

  var = my.elements.first.text

  true? args.empty?
    { s[:get_value var] }
    { s[:call, null, var, args.first] }
}

ast :method_chain {
  list = []

  add_ast my, list

  list.reduce { memo, call |
    true? call.name == :get_value
      { c = s[:call]; c.nodes = call.nodes; c.nodes.insert(1, memo); call = c }
      { call.nodes[0] = memo }
    call
  }
}

ast :paren_call {
  list = s[:invoke]

  add_ast my, list
}

ast :var_assign {
  list = s[:var_assign my.var.text]

  add_ast my, list
}

ast :field_assign {
  list = s[:field_assign]
  add_ast my, list
}

ast :field_access {
  list = s[:field_access]

  add_ast my, list
  list << my.elements.last.text
}

ast :binary_op {
  list = s[:binop].concat my.elements.first.ast

  list << my.elements.last.ast
}

ast :binary_op_chain {
  list = []

  my.elements.each { e |
    list << e.elements.first.ast
    list << e.elements[2].text
  }

  list
}

ast :simple_meth_access {
  s[:meth_access, null, my.meth.text]
}

ast :simple_paren_meth_access {
  list = s[:meth_access null]

  add_ast my, list
}

ast :paren_meth_access {
  list = s[:meth_access]

  add_ast my, list

  list << my.meth.text
}

ast :index_get {
  list = s[:call, my.elements.first.ast, :get]
  index_args = add_ast my.gindexes, []

  list << index_args.deq

  list = index_args.reduce(list, { memo, index |
    s[:call, memo, :get, index]
   })

  args = add_ast(my.iargs, []).first

  null? args
    { list }
    { s[:invoke, list, args] }
}

ast :index_set {
  list = s[:call, my.elements.first.ast]

  true? my.sindexes.elements.length > 1
    {
      list << :get

      index_args = add_ast my.sindexes, []

      list << [index_args.deq]
      final_arg = index_args.pop

      list = index_args.reduce(list, { memo, index |
        s[:call, memo, :get, [index]]
      })

      value = my.elements.last.ast

      s[:call, list, :set, [final_arg, value]]
    }
    {
      args = add_ast my.sindexes, []
      args << my.elements.last.ast
      list << :set << args
    }
}

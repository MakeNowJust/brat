node = object.new
node.prototype [
    init: { name |
            my.node_name = name
            export my, name
          }
    to_s: { "<#{my.node_name}: #{my.matched}>" }
]

each_ast = { elements, block |
  elements.each { e |
    when { e.has_method?(:ast)} { block e.ast }
         { e.has_method?(:elements) } { each_ast e.elements, ->block }
  }
}

ast = { name, block |
  n = node.new name
  n.ast = ->block
}

ast :program {
  out = [:program]
  each_ast elements, { ast |
    out << ast
  }
  out
}

ast :simple_exp {
  a = null
  each_ast exp.elements, { ast | a = ast }
  a
}

ast :bnumber {
  [:number text.to_f]
}

ast :empty_array {
  [:array]
}

ast :barray {
  [:array].concat inner.ast
}

ast :array_inner {
  list = []
  each_ast my.first.elements, { ast | list << ast }

  my.rest.elements.each { e |
    each_ast e.elements.last.elements, { ast |
      list << ast
    }
  }
  list
}

ast :empty_hash {
  [:hash]
}

ast :bhash {
  [:hash].concat inner.ast
}

ast :hash_arg {
  list = []
  each_ast my.key.elements, { ast | list << ast }
  each_ast my.value.elements, { ast | list << ast }
  list
}

ast :hash_key_arg {
  list = [[:string my.key.text]]
  each_ast my.value.elements, { ast | list << ast }
  list
}

ast :bregex {
  [:regex my.text]
}

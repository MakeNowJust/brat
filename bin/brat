#!/usr/bin/env lua
--Set up paths so we can access Brat runtime files
program_path = debug.getinfo(1, "S").short_src
program_path = program_path:match("(.+/)bin/brat$")

if program_path == nil then
	program_path = "../"
end

package.cpath = package.cpath .. ";" .. program_path .. "lib/?.so"
package.path = package.path .. ";" .. program_path .. "core/?.lua;" .. program_path .. "stdlib/?.lua;" .. program_path .. "lib/?.lua"

require "lfs"

local abort = function (message)
	print(message)
	os.exit(-1)
end

local interactive = function ()
	require "lpty"

	local parser = lpty.new{no_local_echo = true}
	parser:startproc("ruby", program_path .. "/parser/parse.rb", "--interactive")
	
	local readline = require "readline"

	local input
	local line = 1
	local parsed
	local parsed_function
	local output
	local lua_code
	local current_env = getfenv()
	require "core"
	local interactive_env = {
		require = require;
		package = package;
		print = print;
		object = object;
		array = array;
		number = number;
		string = base_string;
		exception = exception;
		hash = hash;
		regex = regex;
		_self = object;
		_type = type;
		_error = error;
		_tostring = tostring;
	}

	local rescue = function (obj, err)
		return err
	end

	local protect_options = hash:new({ [base_string:new("rescue")] = rescue })

	print("# Interactive Brat")

	while true do
		input = readline.readline("brat:" .. line .. "> ")

		if input == nil or input == "quit" then
			parser:endproc()
			return
		elseif input ~= "" and not input:match("^%s+$") then
			line = line + 1
			readline.add_history(input)

			parser:send(input)
			parser:send("\n\1\n")

			parsed = ""

			while true do
				lua_code = parser:read()
				if lua_code:sub(-1) == "\1" then
					parsed = parsed .. lua_code:sub(0, -2)
					break
				else
					parsed = parsed .. lua_code
				end
			end

			parsed_function = assert(loadstring(parsed, "interactive"))

			setfenv(parsed_function, interactive_env)

			print("#=> " .. tostring(object:protect(parsed_function, protect_options)))
		end
	end
end

compile_file = function (file_name)
	brat_file_name = file_name .. ".brat"
	lua_file_name = file_name .. ".lua"

	brat_modified = lfs.attributes(brat_file_name, "modification")

	--.brat file does not exist
	if brat_modified == nil then
		abort("Could not open " .. brat_file_name)
	end

	lua_modified = lfs.attributes(lua_file_name, "modification")

	if lua_modified == nil or brat_modified > lua_modified then
		os.remove(file_name .. ".lua")
		os.execute("ruby " .. program_path .. "/parser/parse.rb -i " .. brat_file_name .. " -o " .. lua_file_name)
	end
end

if #arg == 0 then
	interactive()
	abort("Exiting")
end

file_name = arg[#arg]:match("(.+).brat")

if arg[#arg] == "-!" then
	loadstring(io.read("*a"))()
elseif file_name == nil then
	abort("File to execute should end in .brat")
else
	compile_file(file_name)
	dofile(file_name .. ".lua")
end

#!/usr/bin/env ruby
BRAT_VERSON = 20090410

#This is for Ruby 1.8.6 compatibility
unless 0.respond_to? :even?
	class Fixnum
		def even?
			self % 2 == 0
		end
	end
end

#Compiles parser if it needs to be. Returns false if compilation does not occur, otherwise returns result of compilation.
def compile_parser force = false
	if force or not File.exist? "#$program_path/parser/brat.rb" or newer? "#$program_path/parser/brat.treetop", "#$program_path/parser/brat.rb"
		system "cd #$program_path/parser && tt brat.treetop"
	else
		false
	end
end

#Compiles internal.neko if needed. Returns false if compilation does not occur, otherwise returns result of compilation.
def compile_brat_internal force = false
	if force or not File.exist? "#$program_path/core/internal.n" or newer? "#$program_path/core/internal.neko", "#$program_path/core/internal.n"
		system "cd #$program_path/core && nekoc internal.neko"
	else
		false
	end
end

#Compiles core.brat if needed. Returns false if compilation does not occur, otherwise returns result of compilation.
def compile_core force = false
	if force or not File.exist? "#$program_path/core/core.n" or newer? "#$program_path/core/core.brat", "#$program_path/core/core.n"
		File.open "#$program_path/core/core.brat.neko", "w" do |f|
			f.puts BaseBratParser.new.parse(File.read("#$program_path/core/core.brat")).core_brat
		end

		system "nekoc #$program_path/core/core.brat.neko" or abort "Error while compiling program"
		system "mv #$program_path/core/core.brat.n #$program_path/core/core.n"
	else
		false
	end
end

#Parses Brat input and returns Neko code from the parser.
def brat_to_neko input
	parser = BaseBratParser.new
	tree = parser.parse(input)
	if tree.nil? or not tree.respond_to? :brat
		raise "Error during parsing:\n#{parser.terminal_failures.join("\n")}\n#{tree.inspect}"
	else
		tree.brat
	end
end

#Checks if file1 is newer than file2
def newer? file1, file2
	File.mtime(file1) > File.mtime(file2)
end

#Compiles and runs code from a single Brat file
def brat file_name, keep_intermediate = false, force = false
	require 'rubygems'
	require 'treetop'
	new_parser = compile_parser(force)
	require "#$program_path/parser/brat"
	require "#$program_path/parser/parser-extension"

	new_internal = compile_brat_internal(force) 
	new_core = compile_core(force)
	force = force || new_parser || new_internal || new_core

	if not File.exist?(file_name + ".n") or newer? file_name, file_name + ".n" or force
		if not File.exist? file_name + ".neko" or newer? file_name, file_name + ".neko" or force
			brat_input = File.read file_name
			begin
				neko = brat_to_neko brat_input
			rescue RuntimeError => e
				puts e
				exit
			end
			File.open(file_name + ".neko", "w") {|f| f.puts neko }
		end

		system "nekoc #{file_name}.neko" or abort "Error while compiling program"
	end

	if not keep_intermediate and File.exist? file_name + ".neko"
		File.delete file_name + ".neko"
	end

	if not system "neko #{file_name}.n"
		abort "Error while running program."
	end
end

#Returns Neko code for Brat input, but without the Neko code it is usually wrapped in.
def inner_brat input
	
	parser = BaseBratParser.new
	tree = parser.parse(input)
	if tree.nil? or not tree.respond_to? :brat
		raise "Error during parsing:\n#{parser.terminal_failures.join("\n")}\n#{tree.inspect}"
	else
		tree.inner_brat
	end
end

#Runs the interactice Brat shell.
def brat_interactive
	require 'rubygems'
	require 'treetop'

	compile_parser
	compile_brat_internal
	
	require "#$program_path/parser/brat"
	require "#$program_path/parser/parser-extension"
	
	compile_core
	$interactive = true

	brat_console = IO.popen "#$program_path/bin/neko_console", "r+"
	brat_console.gets

	current = 0
	prompt = ">"
	line = ""
	loop do
		current += 1

		begin
			next_line = read_line("brat:#{current}#{prompt} ") 
		rescue Interrupt
			puts "Interrupted - exiting"
			unless brat_console.closed?
				brat_console.print "!quit\n\1" rescue nil
			end
			exit
		end

		if next_line.nil?
			puts
			next
		end

		line << next_line

		stripped = line.strip

		if stripped.empty?
			next
		elsif not line_closed? line
			prompt = "?"
			next
		elsif stripped == "quit" or stripped == "exit"
			brat_console.print "!quit\n\1"
			exit
		end

		begin
			neko = inner_brat line
		rescue
			puts "Error converting to Neko."
			line = ""
			next
		end

		#Send to neko console
		begin
			brat_console.print neko
			brat_console.print "\1"
		rescue Errno::EPIPE
			puts "Error - Neko interpreter crashed. Restarting."
			brat_console = IO.popen "#$program_path/bin/neko_console", "r+"
			brat_console.gets
			current = 0
			prompt = ">"
			line = ""
			next
		rescue
			puts "Communication error with Neko."
			next
		end

		#read back from console
		loop do
			begin
				response = brat_console.read_nonblock(12024)
				print response.gsub("\1", "").gsub("\2", "")
				break if response.include? "\1" or response.nil?
				if response.include? "\2"
					brat_console.puts read_line("")
				end
			rescue Interrupt => e
				puts "Interrupted by user"
			rescue Errno::EAGAIN
				retry
			rescue Exception => e
				p e
				exit
			end
		end

		prompt = ">"
		line = ""
	end
end

#Reads a single line using Readline
def read_line prompt
	require 'readline' rescue nil

	if defined? Readline
		line = Readline::readline(prompt)
		Readline::HISTORY.push(line) unless line.nil?
		line
	else
		$stdin.gets
	end
end

#Checks if a line is 'finished'. For example, returns false if a string literal is still open.
def line_closed? line

	items = line.scan(/\{|\}|"|\(|\)|\[|\]/)

	count = Hash.new(0)
	items.each do |i|
		count[i] += 1
	end

	if not count['"'].even? or count["{"] != count["}"] or count["("] != count[")"] or count["["] != count["]"]
		false
	else
		true
	end
end

#Returns help string for Brat executable
def show_help
	puts <<-END
Usage: brat [options] [file_name]
Possible options:
-a    Force recompilation of parser
-f    Ignore existing .n file
-h    Show this help
-k    Don't erase intermediate files (implies -f)
-s    Create standalone executable
-t    Benchmark code
-w    Start Neko web server in current directory
	END
end

#Full path to Brat executable
$program_path = File.dirname(File.expand_path(__FILE__))

#Set up paths for Neko
ENV['LD_LIBRARY_PATH'] ||= ""
ENV['LD_LIBRARY_PATH'] += ":#$program_path/lib/:" << Dir.pwd
ENV['NEKOPATH'] ||= ""
ENV['NEKOPATH'] += ":#$program_path/lib/:#$program_path/core/:" << Dir.pwd
ENV['PATH'] ||= ""
ENV['PATH'] += ":#$program_path/bin/:" << Dir.pwd

if ARGV[0] == '-w'
	exec "nekotools server #{ARGV[1..-1].join(" ")}"
elsif ARGV[0]
	require 'set'
	options = Set.new(ARGV)

	if options.include? '-h'
		show_help
		exit
	elsif options.include? '-i'
		brat_interactive
		exit
	end

	file_name = Dir.pwd + "/" + ARGV[-1]

	if not File.exist? file_name
		abort "No such file: #{ARGV[-1]}"
	end

	force = options.include? "-a"

	if options.include? '-k'
		keep_intermediate = true
		force = true
	else
		keep_intermediate = false
	end

	if options.include? '-f'
		File.delete(file_name + ".n") rescue nil
	end

	if options.include? "-s"
		brat_standalone file_name, keep_intermediate, force
	elsif options.include? "-t"
		require 'benchmark'
		time = Benchmark.measure do
			brat file_name, keep_intermediate, force
		end
		puts time.format('Time: %t %r')
	else
		brat file_name, keep_intermediate, force
	end

else
	brat_interactive
end

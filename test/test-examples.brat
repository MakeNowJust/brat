include 'assert'
setup name: "examples test" {
	test "factorial" {
		assert_equal 720 { fact = {x | true? x == 0, 1, { x * fact(x - 1)}};	fact 6 }
	}

	test "fibonacci" {
		assert_equal 55 { fibonacci = { x| true? x == 0, 0 { true? x == 1, 1 { fibonacci(x - 1) + fibonacci(x - 2)}}; }; fibonacci 10 }
	}

	test "array_map" {
		assert_equal [2,3,4] { array.first = { my[0] }; array.rest = { my[1,-1] }; array.map = {f| true? my.length <= 0 {[]} { true? my.length == 1, {[f my.first]}, {[f my.first] + my.rest.map ->f} }}; [1,2,3].map({x| x + 1}) }
	}

	test "how_are_you_easy" {
		assert_equal "How are you?" { how = {x| "How are you?" }; are = {x|};	you? = null; how are you? }
	}

	test "how_are_you_map" {
		assert_equal ["How", " are ","you?"] { array.first = { my[0] }; array.rest = { my[1,-1] }; array.map = {f| true? my.length <= 0 {[]} { true? my.length == 1 {[f my.first]} {[f my.first] + my.rest.map ->f} }}; how = {x| x.map {y| y }}; are = {x| x}; you? = ["How", " are ", "you?"]; how are you? }
	}

	test "how_are_you_auto_reply" {
		assert_equal "I am fine, thank you!" { How = {x| p "How", x[0], x[1] }; are = {x| [" are "] + x }; you? = ["you?"]; I = {x| "I" + x[0] + x[1] + x[2] + x[3] }; am = {x, y| [" am"] + x + y }; fine = [" fine, "]; thank = {x| ["thank"] + x }; you! = [" you!"]; How are you?;	I am fine, thank you! }
	}

	test "greet" {
		assert_equal "oh, hi john doe" { greet = {first, last| "oh, hi " + first + " " + last }; greet "john", "doe" }
	}

	test "my" {
		assert_equal "hi" { test = object.new; test.y = { my.z = { "hi" } };	test.y;	test.z }
	}

	test "add_not" {
		assert_false { number.! = {x| not x }; a = [1,2,3]; a[1] ! true }
	}

	test "null?" {
		assert_equal "a is null" { a = null; false? { null? a }, { "a is not null" }, { "a is null" } }
	}

	test "tak" {
		assert_equal 7 { tak = { x, y, z | false? y < x, { z } , { tak tak(x - 1, y, z), tak(y - 1, z, x), tak(z - 1, x, y) } }; tak 18, 12, 6 }
	}

	test "hideous " {
		assert_equal "#object< -!_+~%~+_!- <------||==@ >" { a_!?-*+^&@1~\\\\><$ = object.new; a_!?-*+^&@1~\\\\><$.-!_+~%~+_!- = {d0~!@><?&&<>\\/+-*^&% | d0~!@><?&&<>\\/+-*^&%};                a_!?-*+^&@1~\\\\><$.@==||------> = { a_!?-*+^&@1~\\\\><$ };                a_!?-*+^&@1~\\\\><$.<------||==@ = { ->@==||------> };               (@==||------>a_!?-*+^&@1~\\\\><$ -!_+~%~+_!- a_!?-*+^&@1~\\\\><$.<------||==@).to_s }
	}

	}


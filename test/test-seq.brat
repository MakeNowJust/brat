includes :assert :seq

add_results setup name: "seq tests" {
  nums = seq.new { n | n + 1} 0

  test "seq get" {
    m = my
    10.times { i |
      m.assert_equal i, { nums[i] }
    }
  }

  test "seq map then get" {
    s = nums.map({ n | n * 2 })
    assert_equal 0 { s[0] }
    assert_equal 0 { s[0] }
    assert_equal 2 { s[1] }
    assert_equal 4 { s[2] }
  }

  test "seq map get empty" {
    s = seq.new({ seq.stop }).map({ n | n * 2 })
    assert_null s[0]
    assert_null s[1]
  }

  test "seq take" {
    assert_equal seq, { nums.take(5).parent }
    assert_equal 5, { nums.take(5).to_a.length }
    assert_equal 0, { nums.take(0).to_a.length }
  }

  test "seq map with block" {
    s = nums.map({ x | x * x })

    assert_equal seq, { s.parent }
    assert_equal 0 { s[0] }
    assert_equal 0 { s[0] }
    assert_equal [0, 1, 4, 9, 16] { s.take(5).to_a }
    assert_equal [0, 1, 4, 9, 16] { s.take(5).to_a }
  }

  test "seq map with name" {
    s = nums.map(:to_s)

    assert_equal 0.to(10).map(:to_s) { s.take(11).to_a }
    assert { s.take(10).to_a.all? { n | n.string? } }
  }

  test "empty seq map" {
    assert_equal [] { nums.take(0).map({ x | x + 1 }).to_a }
  }

  test "seq select with block" {
    assert_equal [0 2 4 6 8] { nums.select({ n | n % 2 == 0 }).take(5).to_a }
  }

  test "seq select with name" {
    number.odd? = { my % 2 == 1 }

    assert_equal [1 3 5 7 9] { nums.select(:odd?).take(5).to_a }
  }
}

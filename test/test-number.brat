include 'assert'
setup name: "numbers tests" {
	test "number_times" {
		assert_equal 5 { 5.times { :a } }
		assert_equal [:a,:a,:a] { a = []; 3.times { a << :a }; a }
		assert_equal [] { a = []; 0.times { a << :a }; a }
		assert_equal [0,1,2] { a = []; 3.times { i | a << i }; a }
		assert_equal ["0","1","2"] { a = []; 3.times { i | a << i.to_s }; a }
	}

	test "addition_subtraction" {
		assert_equal 0 { 1 - 1 }
		assert_equal 0 { 1 + -1 }
		assert_equal 2 { 1 + 1 }
		assert_equal 3 { 1 + 1 + 1 }
		assert_equal -2 { 1 - 1 - 1 - 1 }
		assert_equal 0 { a = 1; b = 2; c = 3; c - a - b }
		assert_equal 0 { 1 + 3 - 4 + 10 - 5 - 5 }
		assert_equal 1 { 0.5 + 0.5 }
	}

	test "bignum_addition" {
		assert_equal 1073741824 { 1073741823 + 1 }
		assert_equal 1073741824 { 1 + 1073741823 }
		assert_equal 2147483646 { 1073741823 + 1073741823 }
		assert_equal 0 { 1073741823 + -1073741823 }
		assert_equal 0 { -1073741823 + 1073741823 }
	}

	test "bignum_subtraction" {
		assert_equal 1073741823 { 1073741824 - 1 }
		assert_equal 0 { 1073741823 - 1073741823 }
		assert_equal 0 { -1073741823 - -1073741823 }
		assert_equal 1073741824 { 1 - -1073741823 }
	}

	test "precedence" {
		#assert_equal 0 { (1 + 3 * 4 - 10 / 2) / 8 - 1 }
		#assert_equal 0 { (3 * 5 + 5 * 1 + 1 * 40 / 2) - 40 }
	}

}


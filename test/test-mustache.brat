# Mostly copied from here:
# https://github.com/twitter/eckersley/blob/master/test/spec/interpolation.yml
includes :assert :mustache

add_results setup name: "mustache tests" {
  assert_mustache = { opts |
    assert mustache.parse opts[:template]
  }

  test "No interpolation" {
    assert_mustache data: [:]
      template: "Hello from {Mustache}!"
      expected: "Hello from {Mustache}!"
  }

  test "Basic interpolation" {
    assert_mustache data: [subject: "world"]
      template: "Hello, {{subject}}!"
      expected: "Hello, world!"
  }

  test "HTML escaping" {
    assert_mustache data: [forbidden: '& " < >']
      template: "These characters should be HTML escaped: {{forbidden}}"
      expected: "These characters should be HTML escaped: &amp; &quot; &lt; &gt;"
  }

  test "Basic integer interpolation" {
    assert_mustache data: [mph: 85]
      template: '"{{mph}} miles an hour!"'
      expected: '"85 miles an hour!"'
  }

  test "Basic decimal interpolation" {
    assert_mustache data: [power: 1.210]
      template: '"{{power}} jiggawatts!"'
      expected: '"1.21 jiggawatts!"'
  }

  test "Basic context miss Interpolation" {
    assert_mustache data: [:]
      template: "I ({{cannot}}) be seen!"
      expected: "I () be seen!"
  }

  test "Dotted names - basic interpolation" {
    assert_mustache data: [[ person: [ name: 'Joe' ]]]
      template: '"{{person.name}}" == "{{#person}}{{name}}{{/person}}"'
      expected: '"Joe" == "Joe"'
  }

  test "Dotted names - arbitrary depth" {
    assert_mustache data: [a: [b: [c: [d: [e: [name: 'Phil' ]]]]]]
      template: '"{{a.b.c.d.e.name}}" == "Phil"'
      expected: '"Phil" == "Phil"'
  }

  test "Dotted names - broken chains" {
    assert_mustache data: [a: [:]]
      template: '"{{a.b.c}}" == ""'
      expected: '"" == ""'
  }

  test "Dotted names - broken chain resolution" {
    assert_mustache data: [a: [b: [:]] c: [name: 'Jim' ]]
      template: '"{{a.b.c.name}}" == ""'
      expected: '"" == ""'
  }

  test "Dotted names - initial resolution" {
    assert_mustache data: [a: [b: [c: [d: [e: [name: 'Phil' ]]]]]
          b: [c: [d: [e: [ name: 'Wrong' ]]]]]
      template: '"{{#a}}{{b.c.d.e.name}}{{/a}}" == "Phil"'
      expected: '"Phil" == "Phil"'
  }

  test "Interpolation - surrounding whitespace" {
    assert_mustache data: [string: '---']
      template: '| {{string}} |'
      expected: '| --- |'
  }

  test "Interpolation - standalone" {
    assert_mustache data: [string: '---']
      template: "  {{string}}\n"
      expected: "  ---\n"
  }

  test "Interpolation with padding" {
    assert_mustache data: [string: "---"]
      template: '|{{ string }}|'
      expected: '|---|'
  }

  test "Falsey section" {
    assert_mustache data: [boolean: false]
      template: '"{{^boolean}}This should be rendered.{{/boolean}}"'
      expected: '"This should be rendered."'
  }

  test "Truthy section" {
    assert_mustache data: [boolean: true]
      template: '"{{^boolean}}This should not be rendered.{{/boolean}}"'
      expected: '""'
  }

  test "Context" {
    assert_mustache data: [context: [name: 'Joe']]
      template: '"{{^context}}Hi {{name}}.{{/context}}"'
      expected: '""'
  }

  test "List section" {
    assert_mustache data: [list: [ [n: 1], [n: 2], [n: 3]]]
      template: '"{{^list}}{{n}}{{/list}}"'
      expected: '""'
  }

  test "Empty list section" {
    assert_mustache data: [list: [ ]]
      template: '"{{^list}}Yay lists!{{/list}}"'
      expected: '"Yay lists!"'
  }

  test "Multiple inverted sections" {
    assert_mustache data: [bool: false, two: 'second']
      template: "{{^bool}}\n* first\n{{/bool}}\n{{two}}\n{{^bool}}\n* third\n{{/bool}}"
      expected: "* first\n* second\n* third"
  }
}
